
a.out:     file format elf64-x86-64


Disassembly of section .init:

0000000000400418 <_init>:
  400418:	48 83 ec 08          	sub    $0x8,%rsp
  40041c:	48 8b 05 d5 1b 20 00 	mov    0x201bd5(%rip),%rax        # 601ff8 <_DYNAMIC+0x1d0>
  400423:	48 85 c0             	test   %rax,%rax
  400426:	74 05                	je     40042d <_init+0x15>
  400428:	e8 43 00 00 00       	callq  400470 <__gmon_start__@plt>
  40042d:	48 83 c4 08          	add    $0x8,%rsp
  400431:	c3                   	retq   

Disassembly of section .plt:

0000000000400440 <__libc_start_main@plt-0x10>:
  400440:	ff 35 c2 1b 20 00    	pushq  0x201bc2(%rip)        # 602008 <_GLOBAL_OFFSET_TABLE_+0x8>
  400446:	ff 25 c4 1b 20 00    	jmpq   *0x201bc4(%rip)        # 602010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40044c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400450 <__libc_start_main@plt>:
  400450:	ff 25 c2 1b 20 00    	jmpq   *0x201bc2(%rip)        # 602018 <_GLOBAL_OFFSET_TABLE_+0x18>
  400456:	68 00 00 00 00       	pushq  $0x0
  40045b:	e9 e0 ff ff ff       	jmpq   400440 <_init+0x28>

0000000000400460 <calloc@plt>:
  400460:	ff 25 ba 1b 20 00    	jmpq   *0x201bba(%rip)        # 602020 <_GLOBAL_OFFSET_TABLE_+0x20>
  400466:	68 01 00 00 00       	pushq  $0x1
  40046b:	e9 d0 ff ff ff       	jmpq   400440 <_init+0x28>

0000000000400470 <__gmon_start__@plt>:
  400470:	ff 25 b2 1b 20 00    	jmpq   *0x201bb2(%rip)        # 602028 <_GLOBAL_OFFSET_TABLE_+0x28>
  400476:	68 02 00 00 00       	pushq  $0x2
  40047b:	e9 c0 ff ff ff       	jmpq   400440 <_init+0x28>

0000000000400480 <exit@plt>:
  400480:	ff 25 aa 1b 20 00    	jmpq   *0x201baa(%rip)        # 602030 <_GLOBAL_OFFSET_TABLE_+0x30>
  400486:	68 03 00 00 00       	pushq  $0x3
  40048b:	e9 b0 ff ff ff       	jmpq   400440 <_init+0x28>

Disassembly of section .text:

0000000000400490 <_start>:
  400490:	31 ed                	xor    %ebp,%ebp
  400492:	49 89 d1             	mov    %rdx,%r9
  400495:	5e                   	pop    %rsi
  400496:	48 89 e2             	mov    %rsp,%rdx
  400499:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  40049d:	50                   	push   %rax
  40049e:	54                   	push   %rsp
  40049f:	49 c7 c0 60 10 40 00 	mov    $0x401060,%r8
  4004a6:	48 c7 c1 f0 0f 40 00 	mov    $0x400ff0,%rcx
  4004ad:	48 c7 c7 d3 0f 40 00 	mov    $0x400fd3,%rdi
  4004b4:	e8 97 ff ff ff       	callq  400450 <__libc_start_main@plt>
  4004b9:	f4                   	hlt    
  4004ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004004c0 <deregister_tm_clones>:
  4004c0:	b8 4f 20 60 00       	mov    $0x60204f,%eax
  4004c5:	55                   	push   %rbp
  4004c6:	48 2d 48 20 60 00    	sub    $0x602048,%rax
  4004cc:	48 83 f8 0e          	cmp    $0xe,%rax
  4004d0:	48 89 e5             	mov    %rsp,%rbp
  4004d3:	77 02                	ja     4004d7 <deregister_tm_clones+0x17>
  4004d5:	5d                   	pop    %rbp
  4004d6:	c3                   	retq   
  4004d7:	b8 00 00 00 00       	mov    $0x0,%eax
  4004dc:	48 85 c0             	test   %rax,%rax
  4004df:	74 f4                	je     4004d5 <deregister_tm_clones+0x15>
  4004e1:	5d                   	pop    %rbp
  4004e2:	bf 48 20 60 00       	mov    $0x602048,%edi
  4004e7:	ff e0                	jmpq   *%rax
  4004e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004004f0 <register_tm_clones>:
  4004f0:	b8 48 20 60 00       	mov    $0x602048,%eax
  4004f5:	55                   	push   %rbp
  4004f6:	48 2d 48 20 60 00    	sub    $0x602048,%rax
  4004fc:	48 c1 f8 03          	sar    $0x3,%rax
  400500:	48 89 e5             	mov    %rsp,%rbp
  400503:	48 89 c2             	mov    %rax,%rdx
  400506:	48 c1 ea 3f          	shr    $0x3f,%rdx
  40050a:	48 01 d0             	add    %rdx,%rax
  40050d:	48 d1 f8             	sar    %rax
  400510:	75 02                	jne    400514 <register_tm_clones+0x24>
  400512:	5d                   	pop    %rbp
  400513:	c3                   	retq   
  400514:	ba 00 00 00 00       	mov    $0x0,%edx
  400519:	48 85 d2             	test   %rdx,%rdx
  40051c:	74 f4                	je     400512 <register_tm_clones+0x22>
  40051e:	5d                   	pop    %rbp
  40051f:	48 89 c6             	mov    %rax,%rsi
  400522:	bf 48 20 60 00       	mov    $0x602048,%edi
  400527:	ff e2                	jmpq   *%rdx
  400529:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000400530 <__do_global_dtors_aux>:
  400530:	80 3d 11 1b 20 00 00 	cmpb   $0x0,0x201b11(%rip)        # 602048 <__TMC_END__>
  400537:	75 11                	jne    40054a <__do_global_dtors_aux+0x1a>
  400539:	55                   	push   %rbp
  40053a:	48 89 e5             	mov    %rsp,%rbp
  40053d:	e8 7e ff ff ff       	callq  4004c0 <deregister_tm_clones>
  400542:	5d                   	pop    %rbp
  400543:	c6 05 fe 1a 20 00 01 	movb   $0x1,0x201afe(%rip)        # 602048 <__TMC_END__>
  40054a:	f3 c3                	repz retq 
  40054c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400550 <frame_dummy>:
  400550:	48 83 3d c8 18 20 00 	cmpq   $0x0,0x2018c8(%rip)        # 601e20 <__JCR_END__>
  400557:	00 
  400558:	74 1e                	je     400578 <frame_dummy+0x28>
  40055a:	b8 00 00 00 00       	mov    $0x0,%eax
  40055f:	48 85 c0             	test   %rax,%rax
  400562:	74 14                	je     400578 <frame_dummy+0x28>
  400564:	55                   	push   %rbp
  400565:	bf 20 1e 60 00       	mov    $0x601e20,%edi
  40056a:	48 89 e5             	mov    %rsp,%rbp
  40056d:	ff d0                	callq  *%rax
  40056f:	5d                   	pop    %rbp
  400570:	e9 7b ff ff ff       	jmpq   4004f0 <register_tm_clones>
  400575:	0f 1f 00             	nopl   (%rax)
  400578:	e9 73 ff ff ff       	jmpq   4004f0 <register_tm_clones>

000000000040057d <Bool..vtable>:
  40057d:	b3 0f                	mov    $0xf,%bl
  40057f:	40 00 00             	add    %al,(%rax)
  400582:	00 00                	add    %al,(%rax)
  400584:	00 ad 06 40 00 00    	add    %ch,0x4006(%rbp)
  40058a:	00 00                	add    %al,(%rax)
  40058c:	00 ad 0f 40 00 00    	add    %ch,0x400f(%rbp)
  400592:	00 00                	add    %al,(%rax)
  400594:	00 ae 0f 40 00 00    	add    %ch,0x400f(%rsi)
  40059a:	00 00                	add    %al,(%rax)
  40059c:	00 af 0f 40 00 00    	add    %ch,0x400f(%rdi)
  4005a2:	00 00                	add    %al,(%rax)
	...

00000000004005a5 <IO..vtable>:
  4005a5:	b8 0f 40 00 00       	mov    $0x400f,%eax
  4005aa:	00 00                	add    %al,(%rax)
  4005ac:	00 20                	add    %ah,(%rax)
  4005ae:	07                   	(bad)  
  4005af:	40 00 00             	add    %al,(%rax)
  4005b2:	00 00                	add    %al,(%rax)
  4005b4:	00 ad 0f 40 00 00    	add    %ch,0x400f(%rbp)
  4005ba:	00 00                	add    %al,(%rax)
  4005bc:	00 ae 0f 40 00 00    	add    %ch,0x400f(%rsi)
  4005c2:	00 00                	add    %al,(%rax)
  4005c4:	00 af 0f 40 00 00    	add    %ch,0x400f(%rdi)
  4005ca:	00 00                	add    %al,(%rax)
  4005cc:	00 f3                	add    %dh,%bl
  4005ce:	08 40 00             	or     %al,0x0(%rax)
  4005d1:	00 00                	add    %al,(%rax)
  4005d3:	00 00                	add    %al,(%rax)
  4005d5:	f4                   	hlt    
  4005d6:	08 40 00             	or     %al,0x0(%rax)
  4005d9:	00 00                	add    %al,(%rax)
  4005db:	00 00                	add    %al,(%rax)
  4005dd:	f5                   	cmc    
  4005de:	08 40 00             	or     %al,0x0(%rax)
  4005e1:	00 00                	add    %al,(%rax)
  4005e3:	00 00                	add    %al,(%rax)
  4005e5:	f6                   	(bad)  
  4005e6:	08 40 00             	or     %al,0x0(%rax)
  4005e9:	00 00                	add    %al,(%rax)
	...

00000000004005ed <Int..vtable>:
  4005ed:	bb 0f 40 00 00       	mov    $0x400f,%ebx
  4005f2:	00 00                	add    %al,(%rax)
  4005f4:	00 6f 07             	add    %ch,0x7(%rdi)
  4005f7:	40 00 00             	add    %al,(%rax)
  4005fa:	00 00                	add    %al,(%rax)
  4005fc:	00 ad 0f 40 00 00    	add    %ch,0x400f(%rbp)
  400602:	00 00                	add    %al,(%rax)
  400604:	00 ae 0f 40 00 00    	add    %ch,0x400f(%rsi)
  40060a:	00 00                	add    %al,(%rax)
  40060c:	00 af 0f 40 00 00    	add    %ch,0x400f(%rdi)
  400612:	00 00                	add    %al,(%rax)
	...

0000000000400615 <Main..vtable>:
  400615:	bf 0f 40 00 00       	mov    $0x400f,%edi
  40061a:	00 00                	add    %al,(%rax)
  40061c:	00 e2                	add    %ah,%dl
  40061e:	07                   	(bad)  
  40061f:	40 00 00             	add    %al,(%rax)
  400622:	00 00                	add    %al,(%rax)
  400624:	00 ad 0f 40 00 00    	add    %ch,0x400f(%rbp)
  40062a:	00 00                	add    %al,(%rax)
  40062c:	00 ae 0f 40 00 00    	add    %ch,0x400f(%rsi)
  400632:	00 00                	add    %al,(%rax)
  400634:	00 af 0f 40 00 00    	add    %ch,0x400f(%rdi)
  40063a:	00 00                	add    %al,(%rax)
  40063c:	00 f7                	add    %dh,%bh
  40063e:	08 40 00             	or     %al,0x0(%rax)
  400641:	00 00                	add    %al,(%rax)
	...

0000000000400645 <Object..vtable>:
  400645:	c4                   	(bad)  
  400646:	0f 40 00             	cmovo  (%rax),%eax
  400649:	00 00                	add    %al,(%rax)
  40064b:	00 00                	add    %al,(%rax)
  40064d:	31 08                	xor    %ecx,(%rax)
  40064f:	40 00 00             	add    %al,(%rax)
  400652:	00 00                	add    %al,(%rax)
  400654:	00 ad 0f 40 00 00    	add    %ch,0x400f(%rbp)
  40065a:	00 00                	add    %al,(%rax)
  40065c:	00 ae 0f 40 00 00    	add    %ch,0x400f(%rsi)
  400662:	00 00                	add    %al,(%rax)
  400664:	00 af 0f 40 00 00    	add    %ch,0x400f(%rdi)
  40066a:	00 00                	add    %al,(%rax)
	...

000000000040066d <String..vtable>:
  40066d:	cb                   	lret   
  40066e:	0f 40 00             	cmovo  (%rax),%eax
  400671:	00 00                	add    %al,(%rax)
  400673:	00 00                	add    %al,(%rax)
  400675:	80 08 40             	orb    $0x40,(%rax)
  400678:	00 00                	add    %al,(%rax)
  40067a:	00 00                	add    %al,(%rax)
  40067c:	00 ad 0f 40 00 00    	add    %ch,0x400f(%rbp)
  400682:	00 00                	add    %al,(%rax)
  400684:	00 ae 0f 40 00 00    	add    %ch,0x400f(%rsi)
  40068a:	00 00                	add    %al,(%rax)
  40068c:	00 af 0f 40 00 00    	add    %ch,0x400f(%rdi)
  400692:	00 00                	add    %al,(%rax)
  400694:	00 b0 0f 40 00 00    	add    %dh,0x400f(%rax)
  40069a:	00 00                	add    %al,(%rax)
  40069c:	00 b1 0f 40 00 00    	add    %dh,0x400f(%rcx)
  4006a2:	00 00                	add    %al,(%rax)
  4006a4:	00 b2 0f 40 00 00    	add    %dh,0x400f(%rdx)
  4006aa:	00 00                	add    %al,(%rax)
	...

00000000004006ad <Bool..new>:
#;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; CONSTRUCTORS  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;#
###############################################################################
.globl Bool..new
Bool..new:
			# Constructor for Bool
			pushq %rbp
  4006ad:	55                   	push   %rbp
			movq %rsp, %rbp
  4006ae:	48 89 e5             	mov    %rsp,%rbp

			# Push callee saved registers
			pushq %r15
  4006b1:	41 57                	push   %r15
			pushq %r14
  4006b3:	41 56                	push   %r14
			pushq %r13
  4006b5:	41 55                	push   %r13
			pushq %r12
  4006b7:	41 54                	push   %r12
			# Allocate heap space, get self ptr
			movq $4, %rdi
  4006b9:	48 c7 c7 04 00 00 00 	mov    $0x4,%rdi
			movq $8, %rsi
  4006c0:	48 c7 c6 08 00 00 00 	mov    $0x8,%rsi
			call calloc
  4006c7:	e8 94 fd ff ff       	callq  400460 <calloc@plt>
			movq %rax, %rbx
  4006cc:	48 89 c3             	mov    %rax,%rbx

			# Store type tag, size, vtable ptr
			movq $0, %rax
  4006cf:	48 c7 c0 00 00 00 00 	mov    $0x0,%rax
			movq %rax, 0(%rbx)
  4006d6:	48 89 03             	mov    %rax,(%rbx)
			movq $4, %rax
  4006d9:	48 c7 c0 04 00 00 00 	mov    $0x4,%rax
			movq %rax, 8(%rbx)
  4006e0:	48 89 43 08          	mov    %rax,0x8(%rbx)
			movq $Bool..vtable, %rax
  4006e4:	48 c7 c0 7d 05 40 00 	mov    $0x40057d,%rax
			movq %rax, 16(%rbx)
  4006eb:	48 89 43 10          	mov    %rax,0x10(%rbx)
			movq %rbx, %rax
  4006ef:	48 89 d8             	mov    %rbx,%rax

00000000004006f2 <Bool_attributes>:

Bool_attributes:
			# Push caller saved registers
			pushq %rcx
  4006f2:	51                   	push   %rcx
			pushq %rdx
  4006f3:	52                   	push   %rdx
			pushq %rsi
  4006f4:	56                   	push   %rsi
			pushq %rdi
  4006f5:	57                   	push   %rdi
			pushq %r8
  4006f6:	41 50                	push   %r8
			pushq %r9
  4006f8:	41 51                	push   %r9
			pushq %r10
  4006fa:	41 52                	push   %r10
			pushq %r11
  4006fc:	41 53                	push   %r11
			call Int..new
  4006fe:	e8 6c 00 00 00       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400703:	41 5b                	pop    %r11
			popq %r10
  400705:	41 5a                	pop    %r10
			popq %r9
  400707:	41 59                	pop    %r9
			popq %r8
  400709:	41 58                	pop    %r8
			popq %rdi
  40070b:	5f                   	pop    %rdi
			popq %rsi
  40070c:	5e                   	pop    %rsi
			popq %rdx
  40070d:	5a                   	pop    %rdx
			popq %rcx
  40070e:	59                   	pop    %rcx
			movq %rax, %r8
  40070f:	49 89 c0             	mov    %rax,%r8
			movq %r8, 24(%rbx)
  400712:	4c 89 43 18          	mov    %r8,0x18(%rbx)

			# Pop callee saved registers
			popq %r12
  400716:	41 5c                	pop    %r12
			popq %r13
  400718:	41 5d                	pop    %r13
			popq %r14
  40071a:	41 5e                	pop    %r14
			popq %r15
  40071c:	41 5f                	pop    %r15
			leave
  40071e:	c9                   	leaveq 
			ret
  40071f:	c3                   	retq   

0000000000400720 <IO..new>:

.globl IO..new
IO..new:
			# Constructor for IO
			pushq %rbp
  400720:	55                   	push   %rbp
			movq %rsp, %rbp
  400721:	48 89 e5             	mov    %rsp,%rbp

			# Push callee saved registers
			pushq %r15
  400724:	41 57                	push   %r15
			pushq %r14
  400726:	41 56                	push   %r14
			pushq %r13
  400728:	41 55                	push   %r13
			pushq %r12
  40072a:	41 54                	push   %r12
			# Allocate heap space, get self ptr
			movq $3, %rdi
  40072c:	48 c7 c7 03 00 00 00 	mov    $0x3,%rdi
			movq $8, %rsi
  400733:	48 c7 c6 08 00 00 00 	mov    $0x8,%rsi
			call calloc
  40073a:	e8 21 fd ff ff       	callq  400460 <calloc@plt>
			movq %rax, %rbx
  40073f:	48 89 c3             	mov    %rax,%rbx

			# Store type tag, size, vtable ptr
			movq $2, %rax
  400742:	48 c7 c0 02 00 00 00 	mov    $0x2,%rax
			movq %rax, 0(%rbx)
  400749:	48 89 03             	mov    %rax,(%rbx)
			movq $3, %rax
  40074c:	48 c7 c0 03 00 00 00 	mov    $0x3,%rax
			movq %rax, 8(%rbx)
  400753:	48 89 43 08          	mov    %rax,0x8(%rbx)
			movq $IO..vtable, %rax
  400757:	48 c7 c0 a5 05 40 00 	mov    $0x4005a5,%rax
			movq %rax, 16(%rbx)
  40075e:	48 89 43 10          	mov    %rax,0x10(%rbx)
			movq %rbx, %rax
  400762:	48 89 d8             	mov    %rbx,%rax

0000000000400765 <IO_attributes>:

IO_attributes:

			# Pop callee saved registers
			popq %r12
  400765:	41 5c                	pop    %r12
			popq %r13
  400767:	41 5d                	pop    %r13
			popq %r14
  400769:	41 5e                	pop    %r14
			popq %r15
  40076b:	41 5f                	pop    %r15
			leave
  40076d:	c9                   	leaveq 
			ret
  40076e:	c3                   	retq   

000000000040076f <Int..new>:

.globl Int..new
Int..new:
			# Constructor for Int
			pushq %rbp
  40076f:	55                   	push   %rbp
			movq %rsp, %rbp
  400770:	48 89 e5             	mov    %rsp,%rbp

			# Push callee saved registers
			pushq %r15
  400773:	41 57                	push   %r15
			pushq %r14
  400775:	41 56                	push   %r14
			pushq %r13
  400777:	41 55                	push   %r13
			pushq %r12
  400779:	41 54                	push   %r12
			# Allocate heap space, get self ptr
			movq $4, %rdi
  40077b:	48 c7 c7 04 00 00 00 	mov    $0x4,%rdi
			movq $8, %rsi
  400782:	48 c7 c6 08 00 00 00 	mov    $0x8,%rsi
			call calloc
  400789:	e8 d2 fc ff ff       	callq  400460 <calloc@plt>
			movq %rax, %rbx
  40078e:	48 89 c3             	mov    %rax,%rbx

			# Store type tag, size, vtable ptr
			movq $1, %rax
  400791:	48 c7 c0 01 00 00 00 	mov    $0x1,%rax
			movq %rax, 0(%rbx)
  400798:	48 89 03             	mov    %rax,(%rbx)
			movq $4, %rax
  40079b:	48 c7 c0 04 00 00 00 	mov    $0x4,%rax
			movq %rax, 8(%rbx)
  4007a2:	48 89 43 08          	mov    %rax,0x8(%rbx)
			movq $Int..vtable, %rax
  4007a6:	48 c7 c0 ed 05 40 00 	mov    $0x4005ed,%rax
			movq %rax, 16(%rbx)
  4007ad:	48 89 43 10          	mov    %rax,0x10(%rbx)
			movq %rbx, %rax
  4007b1:	48 89 d8             	mov    %rbx,%rax

00000000004007b4 <Int_attributes>:

Int_attributes:
			# Push caller saved registers
			pushq %rcx
  4007b4:	51                   	push   %rcx
			pushq %rdx
  4007b5:	52                   	push   %rdx
			pushq %rsi
  4007b6:	56                   	push   %rsi
			pushq %rdi
  4007b7:	57                   	push   %rdi
			pushq %r8
  4007b8:	41 50                	push   %r8
			pushq %r9
  4007ba:	41 51                	push   %r9
			pushq %r10
  4007bc:	41 52                	push   %r10
			pushq %r11
  4007be:	41 53                	push   %r11
			call Int..new
  4007c0:	e8 aa ff ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  4007c5:	41 5b                	pop    %r11
			popq %r10
  4007c7:	41 5a                	pop    %r10
			popq %r9
  4007c9:	41 59                	pop    %r9
			popq %r8
  4007cb:	41 58                	pop    %r8
			popq %rdi
  4007cd:	5f                   	pop    %rdi
			popq %rsi
  4007ce:	5e                   	pop    %rsi
			popq %rdx
  4007cf:	5a                   	pop    %rdx
			popq %rcx
  4007d0:	59                   	pop    %rcx
			movq %rax, %r8
  4007d1:	49 89 c0             	mov    %rax,%r8
			movq %r8, 24(%rbx)
  4007d4:	4c 89 43 18          	mov    %r8,0x18(%rbx)

			# Pop callee saved registers
			popq %r12
  4007d8:	41 5c                	pop    %r12
			popq %r13
  4007da:	41 5d                	pop    %r13
			popq %r14
  4007dc:	41 5e                	pop    %r14
			popq %r15
  4007de:	41 5f                	pop    %r15
			leave
  4007e0:	c9                   	leaveq 
			ret
  4007e1:	c3                   	retq   

00000000004007e2 <Main..new>:

.globl Main..new
Main..new:
			# Constructor for Main
			pushq %rbp
  4007e2:	55                   	push   %rbp
			movq %rsp, %rbp
  4007e3:	48 89 e5             	mov    %rsp,%rbp

			# Push callee saved registers
			pushq %r15
  4007e6:	41 57                	push   %r15
			pushq %r14
  4007e8:	41 56                	push   %r14
			pushq %r13
  4007ea:	41 55                	push   %r13
			pushq %r12
  4007ec:	41 54                	push   %r12
			# Allocate heap space, get self ptr
			movq $3, %rdi
  4007ee:	48 c7 c7 03 00 00 00 	mov    $0x3,%rdi
			movq $8, %rsi
  4007f5:	48 c7 c6 08 00 00 00 	mov    $0x8,%rsi
			call calloc
  4007fc:	e8 5f fc ff ff       	callq  400460 <calloc@plt>
			movq %rax, %rbx
  400801:	48 89 c3             	mov    %rax,%rbx

			# Store type tag, size, vtable ptr
			movq $5, %rax
  400804:	48 c7 c0 05 00 00 00 	mov    $0x5,%rax
			movq %rax, 0(%rbx)
  40080b:	48 89 03             	mov    %rax,(%rbx)
			movq $3, %rax
  40080e:	48 c7 c0 03 00 00 00 	mov    $0x3,%rax
			movq %rax, 8(%rbx)
  400815:	48 89 43 08          	mov    %rax,0x8(%rbx)
			movq $Main..vtable, %rax
  400819:	48 c7 c0 15 06 40 00 	mov    $0x400615,%rax
			movq %rax, 16(%rbx)
  400820:	48 89 43 10          	mov    %rax,0x10(%rbx)
			movq %rbx, %rax
  400824:	48 89 d8             	mov    %rbx,%rax

0000000000400827 <Main_attributes>:

Main_attributes:

			# Pop callee saved registers
			popq %r12
  400827:	41 5c                	pop    %r12
			popq %r13
  400829:	41 5d                	pop    %r13
			popq %r14
  40082b:	41 5e                	pop    %r14
			popq %r15
  40082d:	41 5f                	pop    %r15
			leave
  40082f:	c9                   	leaveq 
			ret
  400830:	c3                   	retq   

0000000000400831 <Object..new>:

.globl Object..new
Object..new:
			# Constructor for Object
			pushq %rbp
  400831:	55                   	push   %rbp
			movq %rsp, %rbp
  400832:	48 89 e5             	mov    %rsp,%rbp

			# Push callee saved registers
			pushq %r15
  400835:	41 57                	push   %r15
			pushq %r14
  400837:	41 56                	push   %r14
			pushq %r13
  400839:	41 55                	push   %r13
			pushq %r12
  40083b:	41 54                	push   %r12
			# Allocate heap space, get self ptr
			movq $3, %rdi
  40083d:	48 c7 c7 03 00 00 00 	mov    $0x3,%rdi
			movq $8, %rsi
  400844:	48 c7 c6 08 00 00 00 	mov    $0x8,%rsi
			call calloc
  40084b:	e8 10 fc ff ff       	callq  400460 <calloc@plt>
			movq %rax, %rbx
  400850:	48 89 c3             	mov    %rax,%rbx

			# Store type tag, size, vtable ptr
			movq $3, %rax
  400853:	48 c7 c0 03 00 00 00 	mov    $0x3,%rax
			movq %rax, 0(%rbx)
  40085a:	48 89 03             	mov    %rax,(%rbx)
			movq $3, %rax
  40085d:	48 c7 c0 03 00 00 00 	mov    $0x3,%rax
			movq %rax, 8(%rbx)
  400864:	48 89 43 08          	mov    %rax,0x8(%rbx)
			movq $Object..vtable, %rax
  400868:	48 c7 c0 45 06 40 00 	mov    $0x400645,%rax
			movq %rax, 16(%rbx)
  40086f:	48 89 43 10          	mov    %rax,0x10(%rbx)
			movq %rbx, %rax
  400873:	48 89 d8             	mov    %rbx,%rax

0000000000400876 <Object_attributes>:

Object_attributes:

			# Pop callee saved registers
			popq %r12
  400876:	41 5c                	pop    %r12
			popq %r13
  400878:	41 5d                	pop    %r13
			popq %r14
  40087a:	41 5e                	pop    %r14
			popq %r15
  40087c:	41 5f                	pop    %r15
			leave
  40087e:	c9                   	leaveq 
			ret
  40087f:	c3                   	retq   

0000000000400880 <String..new>:

.globl String..new
String..new:
			# Constructor for String
			pushq %rbp
  400880:	55                   	push   %rbp
			movq %rsp, %rbp
  400881:	48 89 e5             	mov    %rsp,%rbp

			# Push callee saved registers
			pushq %r15
  400884:	41 57                	push   %r15
			pushq %r14
  400886:	41 56                	push   %r14
			pushq %r13
  400888:	41 55                	push   %r13
			pushq %r12
  40088a:	41 54                	push   %r12
			# Allocate heap space, get self ptr
			movq $4, %rdi
  40088c:	48 c7 c7 04 00 00 00 	mov    $0x4,%rdi
			movq $8, %rsi
  400893:	48 c7 c6 08 00 00 00 	mov    $0x8,%rsi
			call calloc
  40089a:	e8 c1 fb ff ff       	callq  400460 <calloc@plt>
			movq %rax, %rbx
  40089f:	48 89 c3             	mov    %rax,%rbx

			# Store type tag, size, vtable ptr
			movq $4, %rax
  4008a2:	48 c7 c0 04 00 00 00 	mov    $0x4,%rax
			movq %rax, 0(%rbx)
  4008a9:	48 89 03             	mov    %rax,(%rbx)
			movq $4, %rax
  4008ac:	48 c7 c0 04 00 00 00 	mov    $0x4,%rax
			movq %rax, 8(%rbx)
  4008b3:	48 89 43 08          	mov    %rax,0x8(%rbx)
			movq $String..vtable, %rax
  4008b7:	48 c7 c0 6d 06 40 00 	mov    $0x40066d,%rax
			movq %rax, 16(%rbx)
  4008be:	48 89 43 10          	mov    %rax,0x10(%rbx)
			movq %rbx, %rax
  4008c2:	48 89 d8             	mov    %rbx,%rax

00000000004008c5 <String_attributes>:

String_attributes:
			# Push caller saved registers
			pushq %rcx
  4008c5:	51                   	push   %rcx
			pushq %rdx
  4008c6:	52                   	push   %rdx
			pushq %rsi
  4008c7:	56                   	push   %rsi
			pushq %rdi
  4008c8:	57                   	push   %rdi
			pushq %r8
  4008c9:	41 50                	push   %r8
			pushq %r9
  4008cb:	41 51                	push   %r9
			pushq %r10
  4008cd:	41 52                	push   %r10
			pushq %r11
  4008cf:	41 53                	push   %r11
			call String..new
  4008d1:	e8 aa ff ff ff       	callq  400880 <String..new>
			# Pop caller saved registers
			popq %r11
  4008d6:	41 5b                	pop    %r11
			popq %r10
  4008d8:	41 5a                	pop    %r10
			popq %r9
  4008da:	41 59                	pop    %r9
			popq %r8
  4008dc:	41 58                	pop    %r8
			popq %rdi
  4008de:	5f                   	pop    %rdi
			popq %rsi
  4008df:	5e                   	pop    %rsi
			popq %rdx
  4008e0:	5a                   	pop    %rdx
			popq %rcx
  4008e1:	59                   	pop    %rcx
			movq %rax, %r8
  4008e2:	49 89 c0             	mov    %rax,%r8
			movq %r8, 24(%rbx)
  4008e5:	4c 89 43 18          	mov    %r8,0x18(%rbx)

			# Pop callee saved registers
			popq %r12
  4008e9:	41 5c                	pop    %r12
			popq %r13
  4008eb:	41 5d                	pop    %r13
			popq %r14
  4008ed:	41 5e                	pop    %r14
			popq %r15
  4008ef:	41 5f                	pop    %r15
			leave
  4008f1:	c9                   	leaveq 
			ret
  4008f2:	c3                   	retq   

00000000004008f3 <IO.in_int>:
#;;;;;;;;;;;;;;;;;;;;;;;;;;;; METHOD DEFINITIONS  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;#
###############################################################################
.globl IO.in_int
IO.in_int:
			# Method definition for IO.in_int
			ret
  4008f3:	c3                   	retq   

00000000004008f4 <IO.in_string>:
.globl IO.in_string
IO.in_string:
			# Method definition for IO.in_string
			ret
  4008f4:	c3                   	retq   

00000000004008f5 <IO.out_int>:
.globl IO.out_int
IO.out_int:
			# Method definition for IO.out_int
			ret
  4008f5:	c3                   	retq   

00000000004008f6 <IO.out_string>:
.globl IO.out_string
IO.out_string:
			# Method definition for IO.out_string
			ret
  4008f6:	c3                   	retq   

00000000004008f7 <Main.main>:
.globl Main.main
Main.main:
			# Method definition for Main.main
			pushq %rcx
  4008f7:	51                   	push   %rcx
			pushq %rdx
  4008f8:	52                   	push   %rdx
			pushq %rsi
  4008f9:	56                   	push   %rsi
			pushq %rdi
  4008fa:	57                   	push   %rdi
			pushq %r8
  4008fb:	41 50                	push   %r8
			pushq %r9
  4008fd:	41 51                	push   %r9
			pushq %r10
  4008ff:	41 52                	push   %r10
			pushq %r11
  400901:	41 53                	push   %r11
			call Int..new
  400903:	e8 67 fe ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400908:	41 5b                	pop    %r11
			popq %r10
  40090a:	41 5a                	pop    %r10
			popq %r9
  40090c:	41 59                	pop    %r9
			popq %r8
  40090e:	41 58                	pop    %r8
			popq %rdi
  400910:	5f                   	pop    %rdi
			popq %rsi
  400911:	5e                   	pop    %rsi
			popq %rdx
  400912:	5a                   	pop    %rdx
			popq %rcx
  400913:	59                   	pop    %rcx
			movq %rax, %r12
  400914:	49 89 c4             	mov    %rax,%r12
			# Push caller saved registers
			pushq %rcx
  400917:	51                   	push   %rcx
			pushq %rdx
  400918:	52                   	push   %rdx
			pushq %rsi
  400919:	56                   	push   %rsi
			pushq %rdi
  40091a:	57                   	push   %rdi
			pushq %r8
  40091b:	41 50                	push   %r8
			pushq %r9
  40091d:	41 51                	push   %r9
			pushq %r10
  40091f:	41 52                	push   %r10
			pushq %r11
  400921:	41 53                	push   %r11
			call Int..new
  400923:	e8 47 fe ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400928:	41 5b                	pop    %r11
			popq %r10
  40092a:	41 5a                	pop    %r10
			popq %r9
  40092c:	41 59                	pop    %r9
			popq %r8
  40092e:	41 58                	pop    %r8
			popq %rdi
  400930:	5f                   	pop    %rdi
			popq %rsi
  400931:	5e                   	pop    %rsi
			popq %rdx
  400932:	5a                   	pop    %rdx
			popq %rcx
  400933:	59                   	pop    %rcx
			movq %rax, %r13
  400934:	49 89 c5             	mov    %rax,%r13
			# Initialize integer, 2
			# Push caller saved registers
			pushq %rcx
  400937:	51                   	push   %rcx
			pushq %rdx
  400938:	52                   	push   %rdx
			pushq %rsi
  400939:	56                   	push   %rsi
			pushq %rdi
  40093a:	57                   	push   %rdi
			pushq %r8
  40093b:	41 50                	push   %r8
			pushq %r9
  40093d:	41 51                	push   %r9
			pushq %r10
  40093f:	41 52                	push   %r10
			pushq %r11
  400941:	41 53                	push   %r11
			call Int..new
  400943:	e8 27 fe ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400948:	41 5b                	pop    %r11
			popq %r10
  40094a:	41 5a                	pop    %r10
			popq %r9
  40094c:	41 59                	pop    %r9
			popq %r8
  40094e:	41 58                	pop    %r8
			popq %rdi
  400950:	5f                   	pop    %rdi
			popq %rsi
  400951:	5e                   	pop    %rsi
			popq %rdx
  400952:	5a                   	pop    %rdx
			popq %rcx
  400953:	59                   	pop    %rcx
			movq %rax, %r9
  400954:	49 89 c1             	mov    %rax,%r9
			# Move value into box, save object pointer
			movl $2, 24(%r9)
  400957:	41 c7 41 18 02 00 00 	movl   $0x2,0x18(%r9)
  40095e:	00 
			# Initialize integer, 3
			# Push caller saved registers
			pushq %rcx
  40095f:	51                   	push   %rcx
			pushq %rdx
  400960:	52                   	push   %rdx
			pushq %rsi
  400961:	56                   	push   %rsi
			pushq %rdi
  400962:	57                   	push   %rdi
			pushq %r8
  400963:	41 50                	push   %r8
			pushq %r9
  400965:	41 51                	push   %r9
			pushq %r10
  400967:	41 52                	push   %r10
			pushq %r11
  400969:	41 53                	push   %r11
			call Int..new
  40096b:	e8 ff fd ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400970:	41 5b                	pop    %r11
			popq %r10
  400972:	41 5a                	pop    %r10
			popq %r9
  400974:	41 59                	pop    %r9
			popq %r8
  400976:	41 58                	pop    %r8
			popq %rdi
  400978:	5f                   	pop    %rdi
			popq %rsi
  400979:	5e                   	pop    %rsi
			popq %rdx
  40097a:	5a                   	pop    %rdx
			popq %rcx
  40097b:	59                   	pop    %rcx
			movq %rax, %r8
  40097c:	49 89 c0             	mov    %rax,%r8
			# Move value into box, save object pointer
			movl $3, 24(%r8)
  40097f:	41 c7 40 18 03 00 00 	movl   $0x3,0x18(%r8)
  400986:	00 
			# Dereference the box
			movq 24(%r9), %r10
  400987:	4d 8b 51 18          	mov    0x18(%r9),%r10
			# Dereference the box
			movq 24(%r8), %r9
  40098b:	4d 8b 48 18          	mov    0x18(%r8),%r9
			# multiplication
			movl %r10d, %r8d
  40098f:	45 89 d0             	mov    %r10d,%r8d
			imull %r9d, %r8d
  400992:	45 0f af c1          	imul   %r9d,%r8d
			# Push caller saved registers
			pushq %rcx
  400996:	51                   	push   %rcx
			pushq %rdx
  400997:	52                   	push   %rdx
			pushq %rsi
  400998:	56                   	push   %rsi
			pushq %rdi
  400999:	57                   	push   %rdi
			pushq %r8
  40099a:	41 50                	push   %r8
			pushq %r9
  40099c:	41 51                	push   %r9
			pushq %r10
  40099e:	41 52                	push   %r10
			pushq %r11
  4009a0:	41 53                	push   %r11
			call Int..new
  4009a2:	e8 c8 fd ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  4009a7:	41 5b                	pop    %r11
			popq %r10
  4009a9:	41 5a                	pop    %r10
			popq %r9
  4009ab:	41 59                	pop    %r9
			popq %r8
  4009ad:	41 58                	pop    %r8
			popq %rdi
  4009af:	5f                   	pop    %rdi
			popq %rsi
  4009b0:	5e                   	pop    %rsi
			popq %rdx
  4009b1:	5a                   	pop    %rdx
			popq %rcx
  4009b2:	59                   	pop    %rcx
			# Move value into box, save object pointer
			movl %r8d, 24(%rax)
  4009b3:	44 89 40 18          	mov    %r8d,0x18(%rax)
			movq %rax, %r11
  4009b7:	49 89 c3             	mov    %rax,%r11
			# Initialize integer, 4
			# Push caller saved registers
			pushq %rcx
  4009ba:	51                   	push   %rcx
			pushq %rdx
  4009bb:	52                   	push   %rdx
			pushq %rsi
  4009bc:	56                   	push   %rsi
			pushq %rdi
  4009bd:	57                   	push   %rdi
			pushq %r8
  4009be:	41 50                	push   %r8
			pushq %r9
  4009c0:	41 51                	push   %r9
			pushq %r10
  4009c2:	41 52                	push   %r10
			pushq %r11
  4009c4:	41 53                	push   %r11
			call Int..new
  4009c6:	e8 a4 fd ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  4009cb:	41 5b                	pop    %r11
			popq %r10
  4009cd:	41 5a                	pop    %r10
			popq %r9
  4009cf:	41 59                	pop    %r9
			popq %r8
  4009d1:	41 58                	pop    %r8
			popq %rdi
  4009d3:	5f                   	pop    %rdi
			popq %rsi
  4009d4:	5e                   	pop    %rsi
			popq %rdx
  4009d5:	5a                   	pop    %rdx
			popq %rcx
  4009d6:	59                   	pop    %rcx
			movq %rax, %r10
  4009d7:	49 89 c2             	mov    %rax,%r10
			# Move value into box, save object pointer
			movl $4, 24(%r10)
  4009da:	41 c7 42 18 04 00 00 	movl   $0x4,0x18(%r10)
  4009e1:	00 
			# Initialize integer, 2
			# Push caller saved registers
			pushq %rcx
  4009e2:	51                   	push   %rcx
			pushq %rdx
  4009e3:	52                   	push   %rdx
			pushq %rsi
  4009e4:	56                   	push   %rsi
			pushq %rdi
  4009e5:	57                   	push   %rdi
			pushq %r8
  4009e6:	41 50                	push   %r8
			pushq %r9
  4009e8:	41 51                	push   %r9
			pushq %r10
  4009ea:	41 52                	push   %r10
			pushq %r11
  4009ec:	41 53                	push   %r11
			call Int..new
  4009ee:	e8 7c fd ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  4009f3:	41 5b                	pop    %r11
			popq %r10
  4009f5:	41 5a                	pop    %r10
			popq %r9
  4009f7:	41 59                	pop    %r9
			popq %r8
  4009f9:	41 58                	pop    %r8
			popq %rdi
  4009fb:	5f                   	pop    %rdi
			popq %rsi
  4009fc:	5e                   	pop    %rsi
			popq %rdx
  4009fd:	5a                   	pop    %rdx
			popq %rcx
  4009fe:	59                   	pop    %rcx
			movq %rax, %r8
  4009ff:	49 89 c0             	mov    %rax,%r8
			# Move value into box, save object pointer
			movl $2, 24(%r8)
  400a02:	41 c7 40 18 02 00 00 	movl   $0x2,0x18(%r8)
  400a09:	00 
			# Dereference the box
			movq 24(%r10), %r9
  400a0a:	4d 8b 4a 18          	mov    0x18(%r10),%r9
			# Dereference the box
			movq 24(%r8), %r10
  400a0e:	4d 8b 50 18          	mov    0x18(%r8),%r10
			# division
			subq $8, %rsp
  400a12:	48 83 ec 08          	sub    $0x8,%rsp
			pushq %rdx
  400a16:	52                   	push   %rdx
			pushq %rax
  400a17:	50                   	push   %rax
			pushq %rcx
  400a18:	51                   	push   %rcx
			movl %r10d, 24(%rsp)
  400a19:	44 89 54 24 18       	mov    %r10d,0x18(%rsp)
			movl %r9d, %eax
  400a1e:	44 89 c8             	mov    %r9d,%eax
			cltd
  400a21:	99                   	cltd   
			movl 24(%rsp), %ecx
  400a22:	8b 4c 24 18          	mov    0x18(%rsp),%ecx
			idivl %ecx
  400a26:	f7 f9                	idiv   %ecx
			movl %eax, 28(%rsp)
  400a28:	89 44 24 1c          	mov    %eax,0x1c(%rsp)
			popq %rcx
  400a2c:	59                   	pop    %rcx
			popq %rax
  400a2d:	58                   	pop    %rax
			popq %rdx
  400a2e:	5a                   	pop    %rdx
			movl 4(%rsp), %r8d
  400a2f:	44 8b 44 24 04       	mov    0x4(%rsp),%r8d
			addq $8, %rsp
  400a34:	48 83 c4 08          	add    $0x8,%rsp
			# Push caller saved registers
			pushq %rcx
  400a38:	51                   	push   %rcx
			pushq %rdx
  400a39:	52                   	push   %rdx
			pushq %rsi
  400a3a:	56                   	push   %rsi
			pushq %rdi
  400a3b:	57                   	push   %rdi
			pushq %r8
  400a3c:	41 50                	push   %r8
			pushq %r9
  400a3e:	41 51                	push   %r9
			pushq %r10
  400a40:	41 52                	push   %r10
			pushq %r11
  400a42:	41 53                	push   %r11
			call Int..new
  400a44:	e8 26 fd ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400a49:	41 5b                	pop    %r11
			popq %r10
  400a4b:	41 5a                	pop    %r10
			popq %r9
  400a4d:	41 59                	pop    %r9
			popq %r8
  400a4f:	41 58                	pop    %r8
			popq %rdi
  400a51:	5f                   	pop    %rdi
			popq %rsi
  400a52:	5e                   	pop    %rsi
			popq %rdx
  400a53:	5a                   	pop    %rdx
			popq %rcx
  400a54:	59                   	pop    %rcx
			# Move value into box, save object pointer
			movl %r8d, 24(%rax)
  400a55:	44 89 40 18          	mov    %r8d,0x18(%rax)
			movq %rax, %r9
  400a59:	49 89 c1             	mov    %rax,%r9
			# Initialize integer, 123
			# Push caller saved registers
			pushq %rcx
  400a5c:	51                   	push   %rcx
			pushq %rdx
  400a5d:	52                   	push   %rdx
			pushq %rsi
  400a5e:	56                   	push   %rsi
			pushq %rdi
  400a5f:	57                   	push   %rdi
			pushq %r8
  400a60:	41 50                	push   %r8
			pushq %r9
  400a62:	41 51                	push   %r9
			pushq %r10
  400a64:	41 52                	push   %r10
			pushq %r11
  400a66:	41 53                	push   %r11
			call Int..new
  400a68:	e8 02 fd ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400a6d:	41 5b                	pop    %r11
			popq %r10
  400a6f:	41 5a                	pop    %r10
			popq %r9
  400a71:	41 59                	pop    %r9
			popq %r8
  400a73:	41 58                	pop    %r8
			popq %rdi
  400a75:	5f                   	pop    %rdi
			popq %rsi
  400a76:	5e                   	pop    %rsi
			popq %rdx
  400a77:	5a                   	pop    %rdx
			popq %rcx
  400a78:	59                   	pop    %rcx
			movq %rax, %r10
  400a79:	49 89 c2             	mov    %rax,%r10
			# Move value into box, save object pointer
			movl $123, 24(%r10)
  400a7c:	41 c7 42 18 7b 00 00 	movl   $0x7b,0x18(%r10)
  400a83:	00 
			# Dereference the box
			movq 24(%r9), %r8
  400a84:	4d 8b 41 18          	mov    0x18(%r9),%r8
			# Dereference the box
			movq 24(%r10), %r9
  400a88:	4d 8b 4a 18          	mov    0x18(%r10),%r9
			# multiplication
			movl %r8d, %r10d
  400a8c:	45 89 c2             	mov    %r8d,%r10d
			imull %r9d, %r10d
  400a8f:	45 0f af d1          	imul   %r9d,%r10d
			# Push caller saved registers
			pushq %rcx
  400a93:	51                   	push   %rcx
			pushq %rdx
  400a94:	52                   	push   %rdx
			pushq %rsi
  400a95:	56                   	push   %rsi
			pushq %rdi
  400a96:	57                   	push   %rdi
			pushq %r8
  400a97:	41 50                	push   %r8
			pushq %r9
  400a99:	41 51                	push   %r9
			pushq %r10
  400a9b:	41 52                	push   %r10
			pushq %r11
  400a9d:	41 53                	push   %r11
			call Int..new
  400a9f:	e8 cb fc ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400aa4:	41 5b                	pop    %r11
			popq %r10
  400aa6:	41 5a                	pop    %r10
			popq %r9
  400aa8:	41 59                	pop    %r9
			popq %r8
  400aaa:	41 58                	pop    %r8
			popq %rdi
  400aac:	5f                   	pop    %rdi
			popq %rsi
  400aad:	5e                   	pop    %rsi
			popq %rdx
  400aae:	5a                   	pop    %rdx
			popq %rcx
  400aaf:	59                   	pop    %rcx
			# Move value into box, save object pointer
			movl %r10d, 24(%rax)
  400ab0:	44 89 50 18          	mov    %r10d,0x18(%rax)
			movq %rax, %r8
  400ab4:	49 89 c0             	mov    %rax,%r8
			# Initialize integer, 8
			# Push caller saved registers
			pushq %rcx
  400ab7:	51                   	push   %rcx
			pushq %rdx
  400ab8:	52                   	push   %rdx
			pushq %rsi
  400ab9:	56                   	push   %rsi
			pushq %rdi
  400aba:	57                   	push   %rdi
			pushq %r8
  400abb:	41 50                	push   %r8
			pushq %r9
  400abd:	41 51                	push   %r9
			pushq %r10
  400abf:	41 52                	push   %r10
			pushq %r11
  400ac1:	41 53                	push   %r11
			call Int..new
  400ac3:	e8 a7 fc ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400ac8:	41 5b                	pop    %r11
			popq %r10
  400aca:	41 5a                	pop    %r10
			popq %r9
  400acc:	41 59                	pop    %r9
			popq %r8
  400ace:	41 58                	pop    %r8
			popq %rdi
  400ad0:	5f                   	pop    %rdi
			popq %rsi
  400ad1:	5e                   	pop    %rsi
			popq %rdx
  400ad2:	5a                   	pop    %rdx
			popq %rcx
  400ad3:	59                   	pop    %rcx
			movq %rax, %r12
  400ad4:	49 89 c4             	mov    %rax,%r12
			# Move value into box, save object pointer
			movl $8, 24(%r12)
  400ad7:	41 c7 44 24 18 08 00 	movl   $0x8,0x18(%r12)
  400ade:	00 00 
			# Dereference the box
			movq 24(%r8), %r10
  400ae0:	4d 8b 50 18          	mov    0x18(%r8),%r10
			# Dereference the box
			movq 24(%r12), %r9
  400ae4:	4d 8b 4c 24 18       	mov    0x18(%r12),%r9
			# division
			subq $8, %rsp
  400ae9:	48 83 ec 08          	sub    $0x8,%rsp
			pushq %rdx
  400aed:	52                   	push   %rdx
			pushq %rax
  400aee:	50                   	push   %rax
			pushq %rcx
  400aef:	51                   	push   %rcx
			movl %r9d, 24(%rsp)
  400af0:	44 89 4c 24 18       	mov    %r9d,0x18(%rsp)
			movl %r10d, %eax
  400af5:	44 89 d0             	mov    %r10d,%eax
			cltd
  400af8:	99                   	cltd   
			movl 24(%rsp), %ecx
  400af9:	8b 4c 24 18          	mov    0x18(%rsp),%ecx
			idivl %ecx
  400afd:	f7 f9                	idiv   %ecx
			movl %eax, 28(%rsp)
  400aff:	89 44 24 1c          	mov    %eax,0x1c(%rsp)
			popq %rcx
  400b03:	59                   	pop    %rcx
			popq %rax
  400b04:	58                   	pop    %rax
			popq %rdx
  400b05:	5a                   	pop    %rdx
			movl 4(%rsp), %r8d
  400b06:	44 8b 44 24 04       	mov    0x4(%rsp),%r8d
			addq $8, %rsp
  400b0b:	48 83 c4 08          	add    $0x8,%rsp
			# Push caller saved registers
			pushq %rcx
  400b0f:	51                   	push   %rcx
			pushq %rdx
  400b10:	52                   	push   %rdx
			pushq %rsi
  400b11:	56                   	push   %rsi
			pushq %rdi
  400b12:	57                   	push   %rdi
			pushq %r8
  400b13:	41 50                	push   %r8
			pushq %r9
  400b15:	41 51                	push   %r9
			pushq %r10
  400b17:	41 52                	push   %r10
			pushq %r11
  400b19:	41 53                	push   %r11
			call Int..new
  400b1b:	e8 4f fc ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400b20:	41 5b                	pop    %r11
			popq %r10
  400b22:	41 5a                	pop    %r10
			popq %r9
  400b24:	41 59                	pop    %r9
			popq %r8
  400b26:	41 58                	pop    %r8
			popq %rdi
  400b28:	5f                   	pop    %rdi
			popq %rsi
  400b29:	5e                   	pop    %rsi
			popq %rdx
  400b2a:	5a                   	pop    %rdx
			popq %rcx
  400b2b:	59                   	pop    %rcx
			# Move value into box, save object pointer
			movl %r8d, 24(%rax)
  400b2c:	44 89 40 18          	mov    %r8d,0x18(%rax)
			movq %rax, %r9
  400b30:	49 89 c1             	mov    %rax,%r9
			# Dereference the box
			movq 24(%r11), %r8
  400b33:	4d 8b 43 18          	mov    0x18(%r11),%r8
			# Dereference the box
			movq 24(%r9), %r10
  400b37:	4d 8b 51 18          	mov    0x18(%r9),%r10
			# addition
			movl %r8d, %r9d
  400b3b:	45 89 c1             	mov    %r8d,%r9d
			addl %r10d, %r9d
  400b3e:	45 01 d1             	add    %r10d,%r9d
			# Push caller saved registers
			pushq %rcx
  400b41:	51                   	push   %rcx
			pushq %rdx
  400b42:	52                   	push   %rdx
			pushq %rsi
  400b43:	56                   	push   %rsi
			pushq %rdi
  400b44:	57                   	push   %rdi
			pushq %r8
  400b45:	41 50                	push   %r8
			pushq %r9
  400b47:	41 51                	push   %r9
			pushq %r10
  400b49:	41 52                	push   %r10
			pushq %r11
  400b4b:	41 53                	push   %r11
			call Int..new
  400b4d:	e8 1d fc ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400b52:	41 5b                	pop    %r11
			popq %r10
  400b54:	41 5a                	pop    %r10
			popq %r9
  400b56:	41 59                	pop    %r9
			popq %r8
  400b58:	41 58                	pop    %r8
			popq %rdi
  400b5a:	5f                   	pop    %rdi
			popq %rsi
  400b5b:	5e                   	pop    %rsi
			popq %rdx
  400b5c:	5a                   	pop    %rdx
			popq %rcx
  400b5d:	59                   	pop    %rcx
			# Move value into box, save object pointer
			movl %r9d, 24(%rax)
  400b5e:	44 89 48 18          	mov    %r9d,0x18(%rax)
			movq %rax, %r8
  400b62:	49 89 c0             	mov    %rax,%r8
			# Initialize integer, 4
			# Push caller saved registers
			pushq %rcx
  400b65:	51                   	push   %rcx
			pushq %rdx
  400b66:	52                   	push   %rdx
			pushq %rsi
  400b67:	56                   	push   %rsi
			pushq %rdi
  400b68:	57                   	push   %rdi
			pushq %r8
  400b69:	41 50                	push   %r8
			pushq %r9
  400b6b:	41 51                	push   %r9
			pushq %r10
  400b6d:	41 52                	push   %r10
			pushq %r11
  400b6f:	41 53                	push   %r11
			call Int..new
  400b71:	e8 f9 fb ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400b76:	41 5b                	pop    %r11
			popq %r10
  400b78:	41 5a                	pop    %r10
			popq %r9
  400b7a:	41 59                	pop    %r9
			popq %r8
  400b7c:	41 58                	pop    %r8
			popq %rdi
  400b7e:	5f                   	pop    %rdi
			popq %rsi
  400b7f:	5e                   	pop    %rsi
			popq %rdx
  400b80:	5a                   	pop    %rdx
			popq %rcx
  400b81:	59                   	pop    %rcx
			movq %rax, %r10
  400b82:	49 89 c2             	mov    %rax,%r10
			# Move value into box, save object pointer
			movl $4, 24(%r10)
  400b85:	41 c7 42 18 04 00 00 	movl   $0x4,0x18(%r10)
  400b8c:	00 
			# Dereference the box
			movq 24(%r8), %r9
  400b8d:	4d 8b 48 18          	mov    0x18(%r8),%r9
			# Dereference the box
			movq 24(%r10), %r8
  400b91:	4d 8b 42 18          	mov    0x18(%r10),%r8
			# addition
			movl %r9d, %r10d
  400b95:	45 89 ca             	mov    %r9d,%r10d
			addl %r8d, %r10d
  400b98:	45 01 c2             	add    %r8d,%r10d
			# Push caller saved registers
			pushq %rcx
  400b9b:	51                   	push   %rcx
			pushq %rdx
  400b9c:	52                   	push   %rdx
			pushq %rsi
  400b9d:	56                   	push   %rsi
			pushq %rdi
  400b9e:	57                   	push   %rdi
			pushq %r8
  400b9f:	41 50                	push   %r8
			pushq %r9
  400ba1:	41 51                	push   %r9
			pushq %r10
  400ba3:	41 52                	push   %r10
			pushq %r11
  400ba5:	41 53                	push   %r11
			call Int..new
  400ba7:	e8 c3 fb ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400bac:	41 5b                	pop    %r11
			popq %r10
  400bae:	41 5a                	pop    %r10
			popq %r9
  400bb0:	41 59                	pop    %r9
			popq %r8
  400bb2:	41 58                	pop    %r8
			popq %rdi
  400bb4:	5f                   	pop    %rdi
			popq %rsi
  400bb5:	5e                   	pop    %rsi
			popq %rdx
  400bb6:	5a                   	pop    %rdx
			popq %rcx
  400bb7:	59                   	pop    %rcx
			# Move value into box, save object pointer
			movl %r10d, 24(%rax)
  400bb8:	44 89 50 18          	mov    %r10d,0x18(%rax)
			movq %rax, %r9
  400bbc:	49 89 c1             	mov    %rax,%r9
			# Initialize integer, 234
			# Push caller saved registers
			pushq %rcx
  400bbf:	51                   	push   %rcx
			pushq %rdx
  400bc0:	52                   	push   %rdx
			pushq %rsi
  400bc1:	56                   	push   %rsi
			pushq %rdi
  400bc2:	57                   	push   %rdi
			pushq %r8
  400bc3:	41 50                	push   %r8
			pushq %r9
  400bc5:	41 51                	push   %r9
			pushq %r10
  400bc7:	41 52                	push   %r10
			pushq %r11
  400bc9:	41 53                	push   %r11
			call Int..new
  400bcb:	e8 9f fb ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400bd0:	41 5b                	pop    %r11
			popq %r10
  400bd2:	41 5a                	pop    %r10
			popq %r9
  400bd4:	41 59                	pop    %r9
			popq %r8
  400bd6:	41 58                	pop    %r8
			popq %rdi
  400bd8:	5f                   	pop    %rdi
			popq %rsi
  400bd9:	5e                   	pop    %rsi
			popq %rdx
  400bda:	5a                   	pop    %rdx
			popq %rcx
  400bdb:	59                   	pop    %rcx
			movq %rax, %r10
  400bdc:	49 89 c2             	mov    %rax,%r10
			# Move value into box, save object pointer
			movl $234, 24(%r10)
  400bdf:	41 c7 42 18 ea 00 00 	movl   $0xea,0x18(%r10)
  400be6:	00 
			# Initialize integer, 2
			# Push caller saved registers
			pushq %rcx
  400be7:	51                   	push   %rcx
			pushq %rdx
  400be8:	52                   	push   %rdx
			pushq %rsi
  400be9:	56                   	push   %rsi
			pushq %rdi
  400bea:	57                   	push   %rdi
			pushq %r8
  400beb:	41 50                	push   %r8
			pushq %r9
  400bed:	41 51                	push   %r9
			pushq %r10
  400bef:	41 52                	push   %r10
			pushq %r11
  400bf1:	41 53                	push   %r11
			call Int..new
  400bf3:	e8 77 fb ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400bf8:	41 5b                	pop    %r11
			popq %r10
  400bfa:	41 5a                	pop    %r10
			popq %r9
  400bfc:	41 59                	pop    %r9
			popq %r8
  400bfe:	41 58                	pop    %r8
			popq %rdi
  400c00:	5f                   	pop    %rdi
			popq %rsi
  400c01:	5e                   	pop    %rsi
			popq %rdx
  400c02:	5a                   	pop    %rdx
			popq %rcx
  400c03:	59                   	pop    %rcx
			movq %rax, %r8
  400c04:	49 89 c0             	mov    %rax,%r8
			# Move value into box, save object pointer
			movl $2, 24(%r8)
  400c07:	41 c7 40 18 02 00 00 	movl   $0x2,0x18(%r8)
  400c0e:	00 
			# Dereference the box
			movq 24(%r10), %r11
  400c0f:	4d 8b 5a 18          	mov    0x18(%r10),%r11
			# Dereference the box
			movq 24(%r8), %r10
  400c13:	4d 8b 50 18          	mov    0x18(%r8),%r10
			# division
			subq $8, %rsp
  400c17:	48 83 ec 08          	sub    $0x8,%rsp
			pushq %rdx
  400c1b:	52                   	push   %rdx
			pushq %rax
  400c1c:	50                   	push   %rax
			pushq %rcx
  400c1d:	51                   	push   %rcx
			movl %r10d, 24(%rsp)
  400c1e:	44 89 54 24 18       	mov    %r10d,0x18(%rsp)
			movl %r11d, %eax
  400c23:	44 89 d8             	mov    %r11d,%eax
			cltd
  400c26:	99                   	cltd   
			movl 24(%rsp), %ecx
  400c27:	8b 4c 24 18          	mov    0x18(%rsp),%ecx
			idivl %ecx
  400c2b:	f7 f9                	idiv   %ecx
			movl %eax, 28(%rsp)
  400c2d:	89 44 24 1c          	mov    %eax,0x1c(%rsp)
			popq %rcx
  400c31:	59                   	pop    %rcx
			popq %rax
  400c32:	58                   	pop    %rax
			popq %rdx
  400c33:	5a                   	pop    %rdx
			movl 4(%rsp), %r8d
  400c34:	44 8b 44 24 04       	mov    0x4(%rsp),%r8d
			addq $8, %rsp
  400c39:	48 83 c4 08          	add    $0x8,%rsp
			# Push caller saved registers
			pushq %rcx
  400c3d:	51                   	push   %rcx
			pushq %rdx
  400c3e:	52                   	push   %rdx
			pushq %rsi
  400c3f:	56                   	push   %rsi
			pushq %rdi
  400c40:	57                   	push   %rdi
			pushq %r8
  400c41:	41 50                	push   %r8
			pushq %r9
  400c43:	41 51                	push   %r9
			pushq %r10
  400c45:	41 52                	push   %r10
			pushq %r11
  400c47:	41 53                	push   %r11
			call Int..new
  400c49:	e8 21 fb ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400c4e:	41 5b                	pop    %r11
			popq %r10
  400c50:	41 5a                	pop    %r10
			popq %r9
  400c52:	41 59                	pop    %r9
			popq %r8
  400c54:	41 58                	pop    %r8
			popq %rdi
  400c56:	5f                   	pop    %rdi
			popq %rsi
  400c57:	5e                   	pop    %rsi
			popq %rdx
  400c58:	5a                   	pop    %rdx
			popq %rcx
  400c59:	59                   	pop    %rcx
			# Move value into box, save object pointer
			movl %r8d, 24(%rax)
  400c5a:	44 89 40 18          	mov    %r8d,0x18(%rax)
			movq %rax, %r10
  400c5e:	49 89 c2             	mov    %rax,%r10
			# Dereference the box
			movq 24(%r9), %r8
  400c61:	4d 8b 41 18          	mov    0x18(%r9),%r8
			# Dereference the box
			movq 24(%r10), %r9
  400c65:	4d 8b 4a 18          	mov    0x18(%r10),%r9
			# subtraction
			movl %r8d, %r10d
  400c69:	45 89 c2             	mov    %r8d,%r10d
			subl %r9d, %r10d
  400c6c:	45 29 ca             	sub    %r9d,%r10d
			# Push caller saved registers
			pushq %rcx
  400c6f:	51                   	push   %rcx
			pushq %rdx
  400c70:	52                   	push   %rdx
			pushq %rsi
  400c71:	56                   	push   %rsi
			pushq %rdi
  400c72:	57                   	push   %rdi
			pushq %r8
  400c73:	41 50                	push   %r8
			pushq %r9
  400c75:	41 51                	push   %r9
			pushq %r10
  400c77:	41 52                	push   %r10
			pushq %r11
  400c79:	41 53                	push   %r11
			call Int..new
  400c7b:	e8 ef fa ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400c80:	41 5b                	pop    %r11
			popq %r10
  400c82:	41 5a                	pop    %r10
			popq %r9
  400c84:	41 59                	pop    %r9
			popq %r8
  400c86:	41 58                	pop    %r8
			popq %rdi
  400c88:	5f                   	pop    %rdi
			popq %rsi
  400c89:	5e                   	pop    %rsi
			popq %rdx
  400c8a:	5a                   	pop    %rdx
			popq %rcx
  400c8b:	59                   	pop    %rcx
			# Move value into box, save object pointer
			movl %r10d, 24(%rax)
  400c8c:	44 89 50 18          	mov    %r10d,0x18(%rax)
			movq %rax, %r8
  400c90:	49 89 c0             	mov    %rax,%r8
			# Initialize integer, 1
			# Push caller saved registers
			pushq %rcx
  400c93:	51                   	push   %rcx
			pushq %rdx
  400c94:	52                   	push   %rdx
			pushq %rsi
  400c95:	56                   	push   %rsi
			pushq %rdi
  400c96:	57                   	push   %rdi
			pushq %r8
  400c97:	41 50                	push   %r8
			pushq %r9
  400c99:	41 51                	push   %r9
			pushq %r10
  400c9b:	41 52                	push   %r10
			pushq %r11
  400c9d:	41 53                	push   %r11
			call Int..new
  400c9f:	e8 cb fa ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400ca4:	41 5b                	pop    %r11
			popq %r10
  400ca6:	41 5a                	pop    %r10
			popq %r9
  400ca8:	41 59                	pop    %r9
			popq %r8
  400caa:	41 58                	pop    %r8
			popq %rdi
  400cac:	5f                   	pop    %rdi
			popq %rsi
  400cad:	5e                   	pop    %rsi
			popq %rdx
  400cae:	5a                   	pop    %rdx
			popq %rcx
  400caf:	59                   	pop    %rcx
			movq %rax, %r9
  400cb0:	49 89 c1             	mov    %rax,%r9
			# Move value into box, save object pointer
			movl $1, 24(%r9)
  400cb3:	41 c7 41 18 01 00 00 	movl   $0x1,0x18(%r9)
  400cba:	00 
			# Dereference the box
			movq 24(%r8), %r10
  400cbb:	4d 8b 50 18          	mov    0x18(%r8),%r10
			# Dereference the box
			movq 24(%r9), %r8
  400cbf:	4d 8b 41 18          	mov    0x18(%r9),%r8
			# addition
			movl %r10d, %r9d
  400cc3:	45 89 d1             	mov    %r10d,%r9d
			addl %r8d, %r9d
  400cc6:	45 01 c1             	add    %r8d,%r9d
			# Push caller saved registers
			pushq %rcx
  400cc9:	51                   	push   %rcx
			pushq %rdx
  400cca:	52                   	push   %rdx
			pushq %rsi
  400ccb:	56                   	push   %rsi
			pushq %rdi
  400ccc:	57                   	push   %rdi
			pushq %r8
  400ccd:	41 50                	push   %r8
			pushq %r9
  400ccf:	41 51                	push   %r9
			pushq %r10
  400cd1:	41 52                	push   %r10
			pushq %r11
  400cd3:	41 53                	push   %r11
			call Int..new
  400cd5:	e8 95 fa ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400cda:	41 5b                	pop    %r11
			popq %r10
  400cdc:	41 5a                	pop    %r10
			popq %r9
  400cde:	41 59                	pop    %r9
			popq %r8
  400ce0:	41 58                	pop    %r8
			popq %rdi
  400ce2:	5f                   	pop    %rdi
			popq %rsi
  400ce3:	5e                   	pop    %rsi
			popq %rdx
  400ce4:	5a                   	pop    %rdx
			popq %rcx
  400ce5:	59                   	pop    %rcx
			# Move value into box, save object pointer
			movl %r9d, 24(%rax)
  400ce6:	44 89 48 18          	mov    %r9d,0x18(%rax)
			movq %rax, %r8
  400cea:	49 89 c0             	mov    %rax,%r8
			# Dereference the box
			movq 24(%r8), %r9
  400ced:	4d 8b 48 18          	mov    0x18(%r8),%r9
			# negate
			movl %r9d, %r8d
  400cf1:	45 89 c8             	mov    %r9d,%r8d
			negl %r8d
  400cf4:	41 f7 d8             	neg    %r8d
			# Push caller saved registers
			pushq %rcx
  400cf7:	51                   	push   %rcx
			pushq %rdx
  400cf8:	52                   	push   %rdx
			pushq %rsi
  400cf9:	56                   	push   %rsi
			pushq %rdi
  400cfa:	57                   	push   %rdi
			pushq %r8
  400cfb:	41 50                	push   %r8
			pushq %r9
  400cfd:	41 51                	push   %r9
			pushq %r10
  400cff:	41 52                	push   %r10
			pushq %r11
  400d01:	41 53                	push   %r11
			call Int..new
  400d03:	e8 67 fa ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400d08:	41 5b                	pop    %r11
			popq %r10
  400d0a:	41 5a                	pop    %r10
			popq %r9
  400d0c:	41 59                	pop    %r9
			popq %r8
  400d0e:	41 58                	pop    %r8
			popq %rdi
  400d10:	5f                   	pop    %rdi
			popq %rsi
  400d11:	5e                   	pop    %rsi
			popq %rdx
  400d12:	5a                   	pop    %rdx
			popq %rcx
  400d13:	59                   	pop    %rcx
			# Move value into box, save object pointer
			movl %r8d, 24(%rax)
  400d14:	44 89 40 18          	mov    %r8d,0x18(%rax)
			movq %rax, %r9
  400d18:	49 89 c1             	mov    %rax,%r9
			# assign
			movq %r9, %r12
  400d1b:	4d 89 cc             	mov    %r9,%r12
			# assign
			movq %r12, %r8
  400d1e:	4d 89 e0             	mov    %r12,%r8
			# assign
			movq %r13, %r10
  400d21:	4d 89 ea             	mov    %r13,%r10
			# Dereference the box
			movq 24(%r8), %r9
  400d24:	4d 8b 48 18          	mov    0x18(%r8),%r9
			# Dereference the box
			movq 24(%r10), %r8
  400d28:	4d 8b 42 18          	mov    0x18(%r10),%r8
			# subtraction
			movl %r9d, %r10d
  400d2c:	45 89 ca             	mov    %r9d,%r10d
			subl %r8d, %r10d
  400d2f:	45 29 c2             	sub    %r8d,%r10d
			# Push caller saved registers
			pushq %rcx
  400d32:	51                   	push   %rcx
			pushq %rdx
  400d33:	52                   	push   %rdx
			pushq %rsi
  400d34:	56                   	push   %rsi
			pushq %rdi
  400d35:	57                   	push   %rdi
			pushq %r8
  400d36:	41 50                	push   %r8
			pushq %r9
  400d38:	41 51                	push   %r9
			pushq %r10
  400d3a:	41 52                	push   %r10
			pushq %r11
  400d3c:	41 53                	push   %r11
			call Int..new
  400d3e:	e8 2c fa ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400d43:	41 5b                	pop    %r11
			popq %r10
  400d45:	41 5a                	pop    %r10
			popq %r9
  400d47:	41 59                	pop    %r9
			popq %r8
  400d49:	41 58                	pop    %r8
			popq %rdi
  400d4b:	5f                   	pop    %rdi
			popq %rsi
  400d4c:	5e                   	pop    %rsi
			popq %rdx
  400d4d:	5a                   	pop    %rdx
			popq %rcx
  400d4e:	59                   	pop    %rcx
			# Move value into box, save object pointer
			movl %r10d, 24(%rax)
  400d4f:	44 89 50 18          	mov    %r10d,0x18(%rax)
			movq %rax, %r11
  400d53:	49 89 c3             	mov    %rax,%r11
			# Initialize integer, 237447
			# Push caller saved registers
			pushq %rcx
  400d56:	51                   	push   %rcx
			pushq %rdx
  400d57:	52                   	push   %rdx
			pushq %rsi
  400d58:	56                   	push   %rsi
			pushq %rdi
  400d59:	57                   	push   %rdi
			pushq %r8
  400d5a:	41 50                	push   %r8
			pushq %r9
  400d5c:	41 51                	push   %r9
			pushq %r10
  400d5e:	41 52                	push   %r10
			pushq %r11
  400d60:	41 53                	push   %r11
			call Int..new
  400d62:	e8 08 fa ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400d67:	41 5b                	pop    %r11
			popq %r10
  400d69:	41 5a                	pop    %r10
			popq %r9
  400d6b:	41 59                	pop    %r9
			popq %r8
  400d6d:	41 58                	pop    %r8
			popq %rdi
  400d6f:	5f                   	pop    %rdi
			popq %rsi
  400d70:	5e                   	pop    %rsi
			popq %rdx
  400d71:	5a                   	pop    %rdx
			popq %rcx
  400d72:	59                   	pop    %rcx
			movq %rax, %r8
  400d73:	49 89 c0             	mov    %rax,%r8
			# Move value into box, save object pointer
			movl $237447, 24(%r8)
  400d76:	41 c7 40 18 87 9f 03 	movl   $0x39f87,0x18(%r8)
  400d7d:	00 
			# Initialize integer, 8
			# Push caller saved registers
			pushq %rcx
  400d7e:	51                   	push   %rcx
			pushq %rdx
  400d7f:	52                   	push   %rdx
			pushq %rsi
  400d80:	56                   	push   %rsi
			pushq %rdi
  400d81:	57                   	push   %rdi
			pushq %r8
  400d82:	41 50                	push   %r8
			pushq %r9
  400d84:	41 51                	push   %r9
			pushq %r10
  400d86:	41 52                	push   %r10
			pushq %r11
  400d88:	41 53                	push   %r11
			call Int..new
  400d8a:	e8 e0 f9 ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400d8f:	41 5b                	pop    %r11
			popq %r10
  400d91:	41 5a                	pop    %r10
			popq %r9
  400d93:	41 59                	pop    %r9
			popq %r8
  400d95:	41 58                	pop    %r8
			popq %rdi
  400d97:	5f                   	pop    %rdi
			popq %rsi
  400d98:	5e                   	pop    %rsi
			popq %rdx
  400d99:	5a                   	pop    %rdx
			popq %rcx
  400d9a:	59                   	pop    %rcx
			movq %rax, %r13
  400d9b:	49 89 c5             	mov    %rax,%r13
			# Move value into box, save object pointer
			movl $8, 24(%r13)
  400d9e:	41 c7 45 18 08 00 00 	movl   $0x8,0x18(%r13)
  400da5:	00 
			# Dereference the box
			movq 24(%r8), %r9
  400da6:	4d 8b 48 18          	mov    0x18(%r8),%r9
			# Dereference the box
			movq 24(%r13), %r10
  400daa:	4d 8b 55 18          	mov    0x18(%r13),%r10
			# division
			subq $8, %rsp
  400dae:	48 83 ec 08          	sub    $0x8,%rsp
			pushq %rdx
  400db2:	52                   	push   %rdx
			pushq %rax
  400db3:	50                   	push   %rax
			pushq %rcx
  400db4:	51                   	push   %rcx
			movl %r10d, 24(%rsp)
  400db5:	44 89 54 24 18       	mov    %r10d,0x18(%rsp)
			movl %r9d, %eax
  400dba:	44 89 c8             	mov    %r9d,%eax
			cltd
  400dbd:	99                   	cltd   
			movl 24(%rsp), %ecx
  400dbe:	8b 4c 24 18          	mov    0x18(%rsp),%ecx
			idivl %ecx
  400dc2:	f7 f9                	idiv   %ecx
			movl %eax, 28(%rsp)
  400dc4:	89 44 24 1c          	mov    %eax,0x1c(%rsp)
			popq %rcx
  400dc8:	59                   	pop    %rcx
			popq %rax
  400dc9:	58                   	pop    %rax
			popq %rdx
  400dca:	5a                   	pop    %rdx
			movl 4(%rsp), %r8d
  400dcb:	44 8b 44 24 04       	mov    0x4(%rsp),%r8d
			addq $8, %rsp
  400dd0:	48 83 c4 08          	add    $0x8,%rsp
			# Push caller saved registers
			pushq %rcx
  400dd4:	51                   	push   %rcx
			pushq %rdx
  400dd5:	52                   	push   %rdx
			pushq %rsi
  400dd6:	56                   	push   %rsi
			pushq %rdi
  400dd7:	57                   	push   %rdi
			pushq %r8
  400dd8:	41 50                	push   %r8
			pushq %r9
  400dda:	41 51                	push   %r9
			pushq %r10
  400ddc:	41 52                	push   %r10
			pushq %r11
  400dde:	41 53                	push   %r11
			call Int..new
  400de0:	e8 8a f9 ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400de5:	41 5b                	pop    %r11
			popq %r10
  400de7:	41 5a                	pop    %r10
			popq %r9
  400de9:	41 59                	pop    %r9
			popq %r8
  400deb:	41 58                	pop    %r8
			popq %rdi
  400ded:	5f                   	pop    %rdi
			popq %rsi
  400dee:	5e                   	pop    %rsi
			popq %rdx
  400def:	5a                   	pop    %rdx
			popq %rcx
  400df0:	59                   	pop    %rcx
			# Move value into box, save object pointer
			movl %r8d, 24(%rax)
  400df1:	44 89 40 18          	mov    %r8d,0x18(%rax)
			movq %rax, %r9
  400df5:	49 89 c1             	mov    %rax,%r9
			# Dereference the box
			movq 24(%r11), %r10
  400df8:	4d 8b 53 18          	mov    0x18(%r11),%r10
			# Dereference the box
			movq 24(%r9), %r8
  400dfc:	4d 8b 41 18          	mov    0x18(%r9),%r8
			# addition
			movl %r10d, %r9d
  400e00:	45 89 d1             	mov    %r10d,%r9d
			addl %r8d, %r9d
  400e03:	45 01 c1             	add    %r8d,%r9d
			# Push caller saved registers
			pushq %rcx
  400e06:	51                   	push   %rcx
			pushq %rdx
  400e07:	52                   	push   %rdx
			pushq %rsi
  400e08:	56                   	push   %rsi
			pushq %rdi
  400e09:	57                   	push   %rdi
			pushq %r8
  400e0a:	41 50                	push   %r8
			pushq %r9
  400e0c:	41 51                	push   %r9
			pushq %r10
  400e0e:	41 52                	push   %r10
			pushq %r11
  400e10:	41 53                	push   %r11
			call Int..new
  400e12:	e8 58 f9 ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400e17:	41 5b                	pop    %r11
			popq %r10
  400e19:	41 5a                	pop    %r10
			popq %r9
  400e1b:	41 59                	pop    %r9
			popq %r8
  400e1d:	41 58                	pop    %r8
			popq %rdi
  400e1f:	5f                   	pop    %rdi
			popq %rsi
  400e20:	5e                   	pop    %rsi
			popq %rdx
  400e21:	5a                   	pop    %rdx
			popq %rcx
  400e22:	59                   	pop    %rcx
			# Move value into box, save object pointer
			movl %r9d, 24(%rax)
  400e23:	44 89 48 18          	mov    %r9d,0x18(%rax)
			movq %rax, %r13
  400e27:	49 89 c5             	mov    %rax,%r13
			# Initialize integer, 4
			# Push caller saved registers
			pushq %rcx
  400e2a:	51                   	push   %rcx
			pushq %rdx
  400e2b:	52                   	push   %rdx
			pushq %rsi
  400e2c:	56                   	push   %rsi
			pushq %rdi
  400e2d:	57                   	push   %rdi
			pushq %r8
  400e2e:	41 50                	push   %r8
			pushq %r9
  400e30:	41 51                	push   %r9
			pushq %r10
  400e32:	41 52                	push   %r10
			pushq %r11
  400e34:	41 53                	push   %r11
			call Int..new
  400e36:	e8 34 f9 ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400e3b:	41 5b                	pop    %r11
			popq %r10
  400e3d:	41 5a                	pop    %r10
			popq %r9
  400e3f:	41 59                	pop    %r9
			popq %r8
  400e41:	41 58                	pop    %r8
			popq %rdi
  400e43:	5f                   	pop    %rdi
			popq %rsi
  400e44:	5e                   	pop    %rsi
			popq %rdx
  400e45:	5a                   	pop    %rdx
			popq %rcx
  400e46:	59                   	pop    %rcx
			movq %rax, %r11
  400e47:	49 89 c3             	mov    %rax,%r11
			# Move value into box, save object pointer
			movl $4, 24(%r11)
  400e4a:	41 c7 43 18 04 00 00 	movl   $0x4,0x18(%r11)
  400e51:	00 
			# Initialize integer, 6000
			# Push caller saved registers
			pushq %rcx
  400e52:	51                   	push   %rcx
			pushq %rdx
  400e53:	52                   	push   %rdx
			pushq %rsi
  400e54:	56                   	push   %rsi
			pushq %rdi
  400e55:	57                   	push   %rdi
			pushq %r8
  400e56:	41 50                	push   %r8
			pushq %r9
  400e58:	41 51                	push   %r9
			pushq %r10
  400e5a:	41 52                	push   %r10
			pushq %r11
  400e5c:	41 53                	push   %r11
			call Int..new
  400e5e:	e8 0c f9 ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400e63:	41 5b                	pop    %r11
			popq %r10
  400e65:	41 5a                	pop    %r10
			popq %r9
  400e67:	41 59                	pop    %r9
			popq %r8
  400e69:	41 58                	pop    %r8
			popq %rdi
  400e6b:	5f                   	pop    %rdi
			popq %rsi
  400e6c:	5e                   	pop    %rsi
			popq %rdx
  400e6d:	5a                   	pop    %rdx
			popq %rcx
  400e6e:	59                   	pop    %rcx
			movq %rax, %r8
  400e6f:	49 89 c0             	mov    %rax,%r8
			# Move value into box, save object pointer
			movl $6000, 24(%r8)
  400e72:	41 c7 40 18 70 17 00 	movl   $0x1770,0x18(%r8)
  400e79:	00 
			# Dereference the box
			movq 24(%r8), %r9
  400e7a:	4d 8b 48 18          	mov    0x18(%r8),%r9
			# negate
			movl %r9d, %r8d
  400e7e:	45 89 c8             	mov    %r9d,%r8d
			negl %r8d
  400e81:	41 f7 d8             	neg    %r8d
			# Push caller saved registers
			pushq %rcx
  400e84:	51                   	push   %rcx
			pushq %rdx
  400e85:	52                   	push   %rdx
			pushq %rsi
  400e86:	56                   	push   %rsi
			pushq %rdi
  400e87:	57                   	push   %rdi
			pushq %r8
  400e88:	41 50                	push   %r8
			pushq %r9
  400e8a:	41 51                	push   %r9
			pushq %r10
  400e8c:	41 52                	push   %r10
			pushq %r11
  400e8e:	41 53                	push   %r11
			call Int..new
  400e90:	e8 da f8 ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400e95:	41 5b                	pop    %r11
			popq %r10
  400e97:	41 5a                	pop    %r10
			popq %r9
  400e99:	41 59                	pop    %r9
			popq %r8
  400e9b:	41 58                	pop    %r8
			popq %rdi
  400e9d:	5f                   	pop    %rdi
			popq %rsi
  400e9e:	5e                   	pop    %rsi
			popq %rdx
  400e9f:	5a                   	pop    %rdx
			popq %rcx
  400ea0:	59                   	pop    %rcx
			# Move value into box, save object pointer
			movl %r8d, 24(%rax)
  400ea1:	44 89 40 18          	mov    %r8d,0x18(%rax)
			movq %rax, %r10
  400ea5:	49 89 c2             	mov    %rax,%r10
			# Dereference the box
			movq 24(%r11), %r8
  400ea8:	4d 8b 43 18          	mov    0x18(%r11),%r8
			# Dereference the box
			movq 24(%r10), %r9
  400eac:	4d 8b 4a 18          	mov    0x18(%r10),%r9
			# multiplication
			movl %r8d, %r10d
  400eb0:	45 89 c2             	mov    %r8d,%r10d
			imull %r9d, %r10d
  400eb3:	45 0f af d1          	imul   %r9d,%r10d
			# Push caller saved registers
			pushq %rcx
  400eb7:	51                   	push   %rcx
			pushq %rdx
  400eb8:	52                   	push   %rdx
			pushq %rsi
  400eb9:	56                   	push   %rsi
			pushq %rdi
  400eba:	57                   	push   %rdi
			pushq %r8
  400ebb:	41 50                	push   %r8
			pushq %r9
  400ebd:	41 51                	push   %r9
			pushq %r10
  400ebf:	41 52                	push   %r10
			pushq %r11
  400ec1:	41 53                	push   %r11
			call Int..new
  400ec3:	e8 a7 f8 ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400ec8:	41 5b                	pop    %r11
			popq %r10
  400eca:	41 5a                	pop    %r10
			popq %r9
  400ecc:	41 59                	pop    %r9
			popq %r8
  400ece:	41 58                	pop    %r8
			popq %rdi
  400ed0:	5f                   	pop    %rdi
			popq %rsi
  400ed1:	5e                   	pop    %rsi
			popq %rdx
  400ed2:	5a                   	pop    %rdx
			popq %rcx
  400ed3:	59                   	pop    %rcx
			# Move value into box, save object pointer
			movl %r10d, 24(%rax)
  400ed4:	44 89 50 18          	mov    %r10d,0x18(%rax)
			movq %rax, %r8
  400ed8:	49 89 c0             	mov    %rax,%r8
			# Dereference the box
			movq 24(%r13), %r9
  400edb:	4d 8b 4d 18          	mov    0x18(%r13),%r9
			# Dereference the box
			movq 24(%r8), %r10
  400edf:	4d 8b 50 18          	mov    0x18(%r8),%r10
			# subtraction
			movl %r9d, %r8d
  400ee3:	45 89 c8             	mov    %r9d,%r8d
			subl %r10d, %r8d
  400ee6:	45 29 d0             	sub    %r10d,%r8d
			# Push caller saved registers
			pushq %rcx
  400ee9:	51                   	push   %rcx
			pushq %rdx
  400eea:	52                   	push   %rdx
			pushq %rsi
  400eeb:	56                   	push   %rsi
			pushq %rdi
  400eec:	57                   	push   %rdi
			pushq %r8
  400eed:	41 50                	push   %r8
			pushq %r9
  400eef:	41 51                	push   %r9
			pushq %r10
  400ef1:	41 52                	push   %r10
			pushq %r11
  400ef3:	41 53                	push   %r11
			call Int..new
  400ef5:	e8 75 f8 ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400efa:	41 5b                	pop    %r11
			popq %r10
  400efc:	41 5a                	pop    %r10
			popq %r9
  400efe:	41 59                	pop    %r9
			popq %r8
  400f00:	41 58                	pop    %r8
			popq %rdi
  400f02:	5f                   	pop    %rdi
			popq %rsi
  400f03:	5e                   	pop    %rsi
			popq %rdx
  400f04:	5a                   	pop    %rdx
			popq %rcx
  400f05:	59                   	pop    %rcx
			# Move value into box, save object pointer
			movl %r8d, 24(%rax)
  400f06:	44 89 40 18          	mov    %r8d,0x18(%rax)
			movq %rax, %r9
  400f0a:	49 89 c1             	mov    %rax,%r9
			# Initialize integer, 87
			# Push caller saved registers
			pushq %rcx
  400f0d:	51                   	push   %rcx
			pushq %rdx
  400f0e:	52                   	push   %rdx
			pushq %rsi
  400f0f:	56                   	push   %rsi
			pushq %rdi
  400f10:	57                   	push   %rdi
			pushq %r8
  400f11:	41 50                	push   %r8
			pushq %r9
  400f13:	41 51                	push   %r9
			pushq %r10
  400f15:	41 52                	push   %r10
			pushq %r11
  400f17:	41 53                	push   %r11
			call Int..new
  400f19:	e8 51 f8 ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400f1e:	41 5b                	pop    %r11
			popq %r10
  400f20:	41 5a                	pop    %r10
			popq %r9
  400f22:	41 59                	pop    %r9
			popq %r8
  400f24:	41 58                	pop    %r8
			popq %rdi
  400f26:	5f                   	pop    %rdi
			popq %rsi
  400f27:	5e                   	pop    %rsi
			popq %rdx
  400f28:	5a                   	pop    %rdx
			popq %rcx
  400f29:	59                   	pop    %rcx
			movq %rax, %r8
  400f2a:	49 89 c0             	mov    %rax,%r8
			# Move value into box, save object pointer
			movl $87, 24(%r8)
  400f2d:	41 c7 40 18 57 00 00 	movl   $0x57,0x18(%r8)
  400f34:	00 
			# Dereference the box
			movq 24(%r9), %r10
  400f35:	4d 8b 51 18          	mov    0x18(%r9),%r10
			# Dereference the box
			movq 24(%r8), %r9
  400f39:	4d 8b 48 18          	mov    0x18(%r8),%r9
			# addition
			movl %r10d, %r8d
  400f3d:	45 89 d0             	mov    %r10d,%r8d
			addl %r9d, %r8d
  400f40:	45 01 c8             	add    %r9d,%r8d
			# Push caller saved registers
			pushq %rcx
  400f43:	51                   	push   %rcx
			pushq %rdx
  400f44:	52                   	push   %rdx
			pushq %rsi
  400f45:	56                   	push   %rsi
			pushq %rdi
  400f46:	57                   	push   %rdi
			pushq %r8
  400f47:	41 50                	push   %r8
			pushq %r9
  400f49:	41 51                	push   %r9
			pushq %r10
  400f4b:	41 52                	push   %r10
			pushq %r11
  400f4d:	41 53                	push   %r11
			call Int..new
  400f4f:	e8 1b f8 ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400f54:	41 5b                	pop    %r11
			popq %r10
  400f56:	41 5a                	pop    %r10
			popq %r9
  400f58:	41 59                	pop    %r9
			popq %r8
  400f5a:	41 58                	pop    %r8
			popq %rdi
  400f5c:	5f                   	pop    %rdi
			popq %rsi
  400f5d:	5e                   	pop    %rsi
			popq %rdx
  400f5e:	5a                   	pop    %rdx
			popq %rcx
  400f5f:	59                   	pop    %rcx
			# Move value into box, save object pointer
			movl %r8d, 24(%rax)
  400f60:	44 89 40 18          	mov    %r8d,0x18(%rax)
			movq %rax, %r9
  400f64:	49 89 c1             	mov    %rax,%r9
			# assign
			movq %r9, %r13
  400f67:	4d 89 cd             	mov    %r9,%r13
			# assign
			movq %r12, %r8
  400f6a:	4d 89 e0             	mov    %r12,%r8
			# assign
			movq %r13, %r9
  400f6d:	4d 89 e9             	mov    %r13,%r9
			# Dereference the box
			movq 24(%r8), %r10
  400f70:	4d 8b 50 18          	mov    0x18(%r8),%r10
			# Dereference the box
			movq 24(%r9), %r8
  400f74:	4d 8b 41 18          	mov    0x18(%r9),%r8
			# addition
			movl %r10d, %r9d
  400f78:	45 89 d1             	mov    %r10d,%r9d
			addl %r8d, %r9d
  400f7b:	45 01 c1             	add    %r8d,%r9d
			# Push caller saved registers
			pushq %rcx
  400f7e:	51                   	push   %rcx
			pushq %rdx
  400f7f:	52                   	push   %rdx
			pushq %rsi
  400f80:	56                   	push   %rsi
			pushq %rdi
  400f81:	57                   	push   %rdi
			pushq %r8
  400f82:	41 50                	push   %r8
			pushq %r9
  400f84:	41 51                	push   %r9
			pushq %r10
  400f86:	41 52                	push   %r10
			pushq %r11
  400f88:	41 53                	push   %r11
			call Int..new
  400f8a:	e8 e0 f7 ff ff       	callq  40076f <Int..new>
			# Pop caller saved registers
			popq %r11
  400f8f:	41 5b                	pop    %r11
			popq %r10
  400f91:	41 5a                	pop    %r10
			popq %r9
  400f93:	41 59                	pop    %r9
			popq %r8
  400f95:	41 58                	pop    %r8
			popq %rdi
  400f97:	5f                   	pop    %rdi
			popq %rsi
  400f98:	5e                   	pop    %rsi
			popq %rdx
  400f99:	5a                   	pop    %rdx
			popq %rcx
  400f9a:	59                   	pop    %rcx
			# Move value into box, save object pointer
			movl %r9d, 24(%rax)
  400f9b:	44 89 48 18          	mov    %r9d,0x18(%rax)
			movq %rax, %r8
  400f9f:	49 89 c0             	mov    %rax,%r8
			# assign
			movq %r8, %r12
  400fa2:	4d 89 c4             	mov    %r8,%r12
			# assign
			movq %r12, %r8
  400fa5:	4d 89 e0             	mov    %r12,%r8
			movq %r8, %rax
  400fa8:	4c 89 c0             	mov    %r8,%rax
			leave
  400fab:	c9                   	leaveq 
			ret
  400fac:	c3                   	retq   

0000000000400fad <Object.abort>:
.globl Object.abort
Object.abort:
			# Method definition for Object.abort
			ret
  400fad:	c3                   	retq   

0000000000400fae <Object.copy>:
.globl Object.copy
Object.copy:
			# Method definition for Object.copy
			ret
  400fae:	c3                   	retq   

0000000000400faf <Object.type_name>:
.globl Object.type_name
Object.type_name:
			# Method definition for Object.type_name
			ret
  400faf:	c3                   	retq   

0000000000400fb0 <String.concat>:
.globl String.concat
String.concat:
			# Method definition for String.concat
			ret
  400fb0:	c3                   	retq   

0000000000400fb1 <String.length>:
.globl String.length
String.length:
			# Method definition for String.length
			ret
  400fb1:	c3                   	retq   

0000000000400fb2 <String.substr>:
.globl String.substr
String.substr:
			# Method definition for String.substr
			ret
  400fb2:	c3                   	retq   

0000000000400fb3 <Bool..string>:
  400fb3:	42 6f                	rex.X outsl %ds:(%rsi),(%dx)
  400fb5:	6f                   	outsl  %ds:(%rsi),(%dx)
  400fb6:	6c                   	insb   (%dx),%es:(%rdi)
	...

0000000000400fb8 <IO..string>:
  400fb8:	49                   	rex.WB
  400fb9:	4f 00 49 6e          	rex.WRXB add %r9b,0x6e(%r9)

0000000000400fbb <Int..string>:
  400fbb:	49 6e                	rex.WB outsb %ds:(%rsi),(%dx)
  400fbd:	74 00                	je     400fbf <Main..string>

0000000000400fbf <Main..string>:
  400fbf:	4d 61                	rex.WRB (bad) 
  400fc1:	69 6e 00 4f 62 6a 65 	imul   $0x656a624f,0x0(%rsi),%ebp

0000000000400fc4 <Object..string>:
  400fc4:	4f 62                	rex.WRXB (bad) 
  400fc6:	6a 65                	pushq  $0x65
  400fc8:	63 74 00 53          	movslq 0x53(%rax,%rax,1),%esi

0000000000400fcb <String..string>:
  400fcb:	53                   	push   %rbx
  400fcc:	74 72                	je     401040 <__libc_csu_init+0x50>
  400fce:	69 6e 67 00 00 e8 0a 	imul   $0xae80000,0x67(%rsi),%ebp

0000000000400fd2 <empty.string>:
	...

0000000000400fd3 <main>:
start:
			# Program begins here
			.globl main
			.type main, @function
main:
			call Main..new
  400fd3:	e8 0a f8 ff ff       	callq  4007e2 <Main..new>
			call Main.main
  400fd8:	e8 1a f9 ff ff       	callq  4008f7 <Main.main>
			call exit
  400fdd:	e8 9e f4 ff ff       	callq  400480 <exit@plt>
  400fe2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  400fe9:	00 00 00 
  400fec:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400ff0 <__libc_csu_init>:
  400ff0:	41 57                	push   %r15
  400ff2:	41 89 ff             	mov    %edi,%r15d
  400ff5:	41 56                	push   %r14
  400ff7:	49 89 f6             	mov    %rsi,%r14
  400ffa:	41 55                	push   %r13
  400ffc:	49 89 d5             	mov    %rdx,%r13
  400fff:	41 54                	push   %r12
  401001:	4c 8d 25 08 0e 20 00 	lea    0x200e08(%rip),%r12        # 601e10 <__frame_dummy_init_array_entry>
  401008:	55                   	push   %rbp
  401009:	48 8d 2d 08 0e 20 00 	lea    0x200e08(%rip),%rbp        # 601e18 <__init_array_end>
  401010:	53                   	push   %rbx
  401011:	4c 29 e5             	sub    %r12,%rbp
  401014:	31 db                	xor    %ebx,%ebx
  401016:	48 c1 fd 03          	sar    $0x3,%rbp
  40101a:	48 83 ec 08          	sub    $0x8,%rsp
  40101e:	e8 f5 f3 ff ff       	callq  400418 <_init>
  401023:	48 85 ed             	test   %rbp,%rbp
  401026:	74 1e                	je     401046 <__libc_csu_init+0x56>
  401028:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40102f:	00 
  401030:	4c 89 ea             	mov    %r13,%rdx
  401033:	4c 89 f6             	mov    %r14,%rsi
  401036:	44 89 ff             	mov    %r15d,%edi
  401039:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  40103d:	48 83 c3 01          	add    $0x1,%rbx
  401041:	48 39 eb             	cmp    %rbp,%rbx
  401044:	75 ea                	jne    401030 <__libc_csu_init+0x40>
  401046:	48 83 c4 08          	add    $0x8,%rsp
  40104a:	5b                   	pop    %rbx
  40104b:	5d                   	pop    %rbp
  40104c:	41 5c                	pop    %r12
  40104e:	41 5d                	pop    %r13
  401050:	41 5e                	pop    %r14
  401052:	41 5f                	pop    %r15
  401054:	c3                   	retq   
  401055:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%rax,%rax,1)
  40105c:	00 00 00 00 

0000000000401060 <__libc_csu_fini>:
  401060:	f3 c3                	repz retq 

Disassembly of section .fini:

0000000000401064 <_fini>:
  401064:	48 83 ec 08          	sub    $0x8,%rsp
  401068:	48 83 c4 08          	add    $0x8,%rsp
  40106c:	c3                   	retq   
