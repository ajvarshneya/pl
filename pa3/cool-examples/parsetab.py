
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '1DC62B5E7EEC1034E7880AE2513593BF'
    
_lr_action_items = {'THEN':([34,35,39,40,45,53,55,56,59,61,79,80,83,86,87,88,89,90,91,93,94,105,115,116,121,124,130,134,135,140,],[-51,-53,-52,-50,-54,-38,-39,-48,-47,84,-15,-21,-49,-26,-45,-43,-46,-42,-44,-40,-41,-20,-25,-35,-17,-29,-16,-24,-19,-18,]),'DIVIDE':([34,35,39,40,45,46,52,53,54,55,56,59,60,61,62,79,80,81,83,86,87,88,89,90,91,93,94,99,101,105,106,114,115,116,121,124,128,130,132,134,135,139,140,141,],[-51,-53,-52,-50,-54,65,65,-38,65,65,65,-47,65,65,65,-15,-21,65,-49,-26,-45,-43,-46,-42,-44,-40,-41,65,65,-20,65,65,-25,-35,-17,65,65,-16,65,-24,-19,65,-18,65,]),'WHILE':([27,32,36,37,38,41,42,43,44,57,58,64,65,66,67,68,70,71,75,77,84,85,100,104,109,111,119,125,129,133,137,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'FI':([34,35,39,40,45,53,55,56,59,79,80,83,86,87,88,89,90,91,93,94,105,115,116,121,124,128,130,134,135,140,],[-51,-53,-52,-50,-54,-38,-39,-48,-47,-15,-21,-49,-26,-45,-43,-46,-42,-44,-40,-41,-20,-25,-35,-17,-29,134,-16,-24,-19,-18,]),'NEW':([27,32,36,37,38,41,42,43,44,57,58,64,65,66,67,68,70,71,75,77,84,85,100,104,109,111,119,125,129,133,137,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'RARROW':([127,],[133,]),'TRUE':([27,32,36,37,38,41,42,43,44,57,58,64,65,66,67,68,70,71,75,77,84,85,100,104,109,111,119,125,129,133,137,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'MINUS':([34,35,39,40,45,46,52,53,54,55,56,59,60,61,62,79,80,81,83,86,87,88,89,90,91,93,94,99,101,105,106,114,115,116,121,124,128,130,132,134,135,139,140,141,],[-51,-53,-52,-50,-54,71,71,-38,71,71,71,-47,71,71,71,-15,-21,71,-49,-26,-45,71,-46,71,-44,-40,-41,71,71,-20,71,71,-25,-35,-17,71,71,-16,71,-24,-19,71,-18,71,]),'DOT':([34,35,39,40,45,46,52,53,54,55,56,59,60,61,62,79,80,81,83,86,87,88,89,90,91,92,93,94,99,101,105,106,114,115,116,121,124,128,130,132,134,135,139,140,141,],[-51,-53,-52,-50,-54,72,72,-38,72,-39,-48,-47,72,72,72,-15,-21,72,-49,-26,-45,-43,-46,-42,-44,108,-40,-41,72,72,-20,72,72,-25,-35,-17,72,72,-16,72,-24,-19,72,-18,72,]),'STRING':([27,32,36,37,38,41,42,43,44,57,58,64,65,66,67,68,70,71,75,77,84,85,100,104,109,111,119,125,129,133,137,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'CASE':([27,32,36,37,38,41,42,43,44,57,58,64,65,66,67,68,70,71,75,77,84,85,100,104,109,111,119,125,129,133,137,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'LE':([34,35,39,40,45,46,52,53,54,55,56,59,60,61,62,79,80,81,83,86,87,88,89,90,91,93,94,99,101,105,106,114,115,116,121,124,128,130,132,134,135,139,140,141,],[-51,-53,-52,-50,-54,64,64,-38,64,64,64,-47,64,64,64,-15,-21,64,-49,-26,-45,64,-46,64,-44,64,64,64,64,-20,64,64,-25,-35,-17,64,64,-16,64,-24,-19,64,-18,64,]),'RPAREN':([17,23,25,34,35,39,40,45,49,50,53,55,56,58,59,60,79,80,81,82,83,86,87,88,89,90,91,93,94,105,109,115,116,118,121,122,124,129,130,134,135,136,140,],[22,-13,31,-51,-53,-52,-50,-54,-12,-14,-38,-39,-48,80,-47,83,-15,-21,-23,105,-49,-26,-45,-43,-46,-42,-44,-40,-41,-20,121,-25,-35,-22,-17,130,-29,135,-16,-24,-19,140,-18,]),'SEMI':([4,11,18,21,26,34,35,39,40,45,46,53,55,56,59,62,79,80,83,86,87,88,89,90,91,93,94,105,113,115,116,121,124,126,130,134,135,139,140,],[6,15,-5,-11,-4,-51,-53,-52,-50,-54,-10,-38,-39,-48,-47,85,-15,-21,-49,-26,-45,-43,-46,-42,-44,-40,-41,-20,-9,-25,-35,-17,-29,-8,-16,-24,-19,142,-18,]),'PLUS':([34,35,39,40,45,46,52,53,54,55,56,59,60,61,62,79,80,81,83,86,87,88,89,90,91,93,94,99,101,105,106,114,115,116,121,124,128,130,132,134,135,139,140,141,],[-51,-53,-52,-50,-54,70,70,-38,70,70,70,-47,70,70,70,-15,-21,70,-49,-26,-45,70,-46,70,-44,-40,-41,70,70,-20,70,70,-25,-35,-17,70,70,-16,70,-24,-19,70,-18,70,]),'ISVOID':([27,32,36,37,38,41,42,43,44,57,58,64,65,66,67,68,70,71,75,77,84,85,100,104,109,111,119,125,129,133,137,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'LARROW':([21,40,112,131,],[27,57,125,137,]),'LT':([34,35,39,40,45,46,52,53,54,55,56,59,60,61,62,79,80,81,83,86,87,88,89,90,91,93,94,99,101,105,106,114,115,116,121,124,128,130,132,134,135,139,140,141,],[-51,-53,-52,-50,-54,68,68,-38,68,68,68,-47,68,68,68,-15,-21,68,-49,-26,-45,68,-46,68,-44,68,68,68,68,-20,68,68,-25,-35,-17,68,68,-16,68,-24,-19,68,-18,68,]),'COLON':([12,22,24,31,74,103,110,],[16,28,30,51,98,117,123,]),'TILDE':([27,32,36,37,38,41,42,43,44,57,58,64,65,66,67,68,70,71,75,77,84,85,100,104,109,111,119,125,129,133,137,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'INTEGER':([27,32,36,37,38,41,42,43,44,57,58,64,65,66,67,68,70,71,75,77,84,85,100,104,109,111,119,125,129,133,137,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'IDENTIFIER':([8,14,15,17,27,29,32,36,37,38,41,42,43,44,47,57,58,64,65,66,67,68,70,71,72,75,77,78,84,85,96,100,104,108,109,111,119,125,129,133,137,142,],[12,12,12,24,40,24,40,40,40,40,40,40,40,40,74,40,40,40,40,40,40,40,40,40,95,40,40,103,40,40,110,40,40,120,40,40,40,40,40,40,40,103,]),'CLASS':([0,6,],[2,2,]),'$end':([1,3,6,9,],[0,-1,-3,-2,]),'INHERITS':([5,],[7,]),'RBRACE':([8,13,14,15,19,20,34,35,39,40,45,53,55,56,59,63,79,80,83,85,86,87,88,89,90,91,93,94,99,105,107,114,115,116,121,124,130,134,135,140,],[-7,18,-7,-7,26,-6,-51,-53,-52,-50,-54,-38,-39,-48,-47,86,-15,-21,-49,-28,-26,-45,-43,-46,-42,-44,-40,-41,113,-20,-27,126,-25,-35,-17,-29,-16,-24,-19,-18,]),'EQUALS':([34,35,39,40,45,46,52,53,54,55,56,59,60,61,62,79,80,81,83,86,87,88,89,90,91,93,94,99,101,105,106,114,115,116,121,124,128,130,132,134,135,139,140,141,],[-51,-53,-52,-50,-54,66,66,-38,66,66,66,-47,66,66,66,-15,-21,66,-49,-26,-45,66,-46,66,-44,66,66,66,66,-20,66,66,-25,-35,-17,66,66,-16,66,-24,-19,66,-18,66,]),'TIMES':([34,35,39,40,45,46,52,53,54,55,56,59,60,61,62,79,80,81,83,86,87,88,89,90,91,93,94,99,101,105,106,114,115,116,121,124,128,130,132,134,135,139,140,141,],[-51,-53,-52,-50,-54,67,67,-38,67,67,67,-47,67,67,67,-15,-21,67,-49,-26,-45,-43,-46,-42,-44,-40,-41,67,67,-20,67,67,-25,-35,-17,67,67,-16,67,-24,-19,67,-18,67,]),'ESAC':([102,142,144,],[116,-37,-36,]),'AT':([34,35,39,40,45,46,52,53,54,55,56,59,60,61,62,79,80,81,83,86,87,88,89,90,91,93,94,99,101,105,106,114,115,116,121,124,128,130,132,134,135,139,140,141,],[-51,-53,-52,-50,-54,69,69,-38,69,-39,-48,-47,69,69,69,-15,-21,69,-49,-26,-45,-43,-46,-42,-44,-40,-41,69,69,-20,69,69,-25,-35,-17,69,69,-16,69,-24,-19,69,-18,69,]),'LPAREN':([12,27,32,36,37,38,40,41,42,43,44,57,58,64,65,66,67,68,70,71,75,77,84,85,95,100,104,109,111,119,120,125,129,133,137,],[17,42,42,42,42,42,58,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,109,42,42,42,42,42,129,42,42,42,42,]),'IN':([34,35,39,40,45,53,55,56,59,73,79,80,83,86,87,88,89,90,91,93,94,97,105,112,115,116,121,124,130,131,132,134,135,138,140,141,143,],[-51,-53,-52,-50,-54,-38,-39,-48,-47,-34,-15,-21,-49,-26,-45,-43,-46,-42,-44,-40,-41,111,-20,-31,-25,-35,-17,-29,-16,-34,-30,-24,-19,-33,-18,-34,-32,]),'ELSE':([34,35,39,40,45,53,55,56,59,79,80,83,86,87,88,89,90,91,93,94,105,106,115,116,121,124,130,134,135,140,],[-51,-53,-52,-50,-54,-38,-39,-48,-47,-15,-21,-49,-26,-45,-43,-46,-42,-44,-40,-41,-20,119,-25,-35,-17,-29,-16,-24,-19,-18,]),'POOL':([34,35,39,40,45,53,55,56,59,79,80,83,86,87,88,89,90,91,93,94,101,105,115,116,121,124,130,134,135,140,],[-51,-53,-52,-50,-54,-38,-39,-48,-47,-15,-21,-49,-26,-45,-43,-46,-42,-44,-40,-41,115,-20,-25,-35,-17,-29,-16,-24,-19,-18,]),'IF':([27,32,36,37,38,41,42,43,44,57,58,64,65,66,67,68,70,71,75,77,84,85,100,104,109,111,119,125,129,133,137,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'LBRACE':([5,10,27,32,36,37,38,41,42,43,44,48,57,58,64,65,66,67,68,70,71,75,76,77,84,85,100,104,109,111,119,125,129,133,137,],[8,14,44,44,44,44,44,44,44,44,44,75,44,44,44,44,44,44,44,44,44,44,100,44,44,44,44,44,44,44,44,44,44,44,44,]),'FALSE':([27,32,36,37,38,41,42,43,44,57,58,64,65,66,67,68,70,71,75,77,84,85,100,104,109,111,119,125,129,133,137,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'OF':([34,35,39,40,45,53,54,55,56,59,79,80,83,86,87,88,89,90,91,93,94,105,115,116,121,124,130,134,135,140,],[-51,-53,-52,-50,-54,-38,78,-39,-48,-47,-15,-21,-49,-26,-45,-43,-46,-42,-44,-40,-41,-20,-25,-35,-17,-29,-16,-24,-19,-18,]),'LET':([27,32,36,37,38,41,42,43,44,57,58,64,65,66,67,68,70,71,75,77,84,85,100,104,109,111,119,125,129,133,137,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'NOT':([27,32,36,37,38,41,42,43,44,57,58,64,65,66,67,68,70,71,75,77,84,85,100,104,109,111,119,125,129,133,137,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'COMMA':([23,34,35,39,40,45,50,53,55,56,59,73,79,80,81,83,86,87,88,89,90,91,93,94,105,112,115,116,121,124,130,131,132,134,135,140,141,],[29,-51,-53,-52,-50,-54,-14,-38,-39,-48,-47,96,-15,-21,104,-49,-26,-45,-43,-46,-42,-44,-40,-41,-20,-31,-25,-35,-17,-29,-16,96,-30,-24,-19,-18,96,]),'TYPE':([2,7,16,28,30,33,51,69,98,117,123,],[5,10,21,48,50,53,76,92,112,127,131,]),'LOOP':([34,35,39,40,45,52,53,55,56,59,79,80,83,86,87,88,89,90,91,93,94,105,115,116,121,124,130,134,135,140,],[-51,-53,-52,-50,-54,77,-38,-39,-48,-47,-15,-21,-49,-26,-45,-43,-46,-42,-44,-40,-41,-20,-25,-35,-17,-29,-16,-24,-19,-18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'features':([8,14,15,],[13,19,20,]),'expr':([27,32,36,37,38,41,42,43,44,57,58,64,65,66,67,68,70,71,75,77,84,85,100,104,109,111,119,125,129,133,137,],[46,52,54,55,56,59,60,61,62,79,81,87,88,89,90,91,93,94,99,101,106,62,114,81,81,124,128,132,81,139,141,]),'binding':([47,],[73,]),'feature':([8,14,15,],[11,11,11,]),'exprs':([58,104,109,129,],[82,118,122,136,]),'classes':([0,6,],[3,9,]),'exprsemi':([44,85,],[63,107,]),'bindings':([73,131,141,],[97,138,143,]),'formal':([17,29,],[23,23,]),'cases':([78,142,],[102,144,]),'class':([0,6,],[4,4,]),'formals':([17,29,],[25,49,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> classes','program',1,'p_program','main.py',531),
  ('classes -> class SEMI classes','classes',3,'p_classes','main.py',538),
  ('classes -> class SEMI','classes',2,'p_classes_base','main.py',543),
  ('class -> CLASS TYPE INHERITS TYPE LBRACE features RBRACE','class',7,'p_class_inherits','main.py',548),
  ('class -> CLASS TYPE LBRACE features RBRACE','class',5,'p_class_no_inherits','main.py',553),
  ('features -> feature SEMI features','features',3,'p_features','main.py',558),
  ('features -> <empty>','features',0,'p_features_base','main.py',563),
  ('feature -> IDENTIFIER LPAREN formals RPAREN COLON TYPE LBRACE expr RBRACE','feature',9,'p_feature_method_formals','main.py',573),
  ('feature -> IDENTIFIER LPAREN RPAREN COLON TYPE LBRACE expr RBRACE','feature',8,'p_feature_method','main.py',578),
  ('feature -> IDENTIFIER COLON TYPE LARROW expr','feature',5,'p_feature_init','main.py',583),
  ('feature -> IDENTIFIER COLON TYPE','feature',3,'p_feature','main.py',588),
  ('formals -> formal COMMA formals','formals',3,'p_formals','main.py',593),
  ('formals -> formal','formals',1,'p_formals_base','main.py',598),
  ('formal -> IDENTIFIER COLON TYPE','formal',3,'p_formal','main.py',606),
  ('expr -> IDENTIFIER LARROW expr','expr',3,'p_expr_assign','main.py',613),
  ('expr -> expr DOT IDENTIFIER LPAREN exprs RPAREN','expr',6,'p_expr_dynamic_dispatch_params','main.py',622),
  ('expr -> expr DOT IDENTIFIER LPAREN RPAREN','expr',5,'p_expr_dynamic_dispatch','main.py',627),
  ('expr -> expr AT TYPE DOT IDENTIFIER LPAREN exprs RPAREN','expr',8,'p_expr_static_dispatch_params','main.py',633),
  ('expr -> expr AT TYPE DOT IDENTIFIER LPAREN RPAREN','expr',7,'p_expr_static_dispatch','main.py',638),
  ('expr -> IDENTIFIER LPAREN exprs RPAREN','expr',4,'p_expr_dispatch_params','main.py',644),
  ('expr -> IDENTIFIER LPAREN RPAREN','expr',3,'p_expr_dispatch','main.py',649),
  ('exprs -> expr COMMA exprs','exprs',3,'p_exprs','main.py',654),
  ('exprs -> expr','exprs',1,'p_exprs_base','main.py',659),
  ('expr -> IF expr THEN expr ELSE expr FI','expr',7,'p_expr_if','main.py',667),
  ('expr -> WHILE expr LOOP expr POOL','expr',5,'p_expr_while','main.py',673),
  ('expr -> LBRACE exprsemi RBRACE','expr',3,'p_block','main.py',679),
  ('exprsemi -> expr SEMI exprsemi','exprsemi',3,'p_exprsemi','main.py',684),
  ('exprsemi -> expr SEMI','exprsemi',2,'p_exprsemi_base','main.py',689),
  ('expr -> LET binding bindings IN expr','expr',5,'p_expr_let','main.py',697),
  ('binding -> IDENTIFIER COLON TYPE LARROW expr','binding',5,'p_binding_init','main.py',703),
  ('binding -> IDENTIFIER COLON TYPE','binding',3,'p_binding_no_init','main.py',708),
  ('bindings -> COMMA IDENTIFIER COLON TYPE LARROW expr bindings','bindings',7,'p_bindings_init','main.py',713),
  ('bindings -> COMMA IDENTIFIER COLON TYPE bindings','bindings',5,'p_bindings_no_init','main.py',718),
  ('bindings -> <empty>','bindings',0,'p_bindings_base','main.py',722),
  ('expr -> CASE expr OF cases ESAC','expr',5,'p_expr_case','main.py',728),
  ('cases -> IDENTIFIER COLON TYPE RARROW expr SEMI cases','cases',7,'p_cases','main.py',734),
  ('cases -> IDENTIFIER COLON TYPE RARROW expr SEMI','cases',6,'p_cases_base','main.py',739),
  ('expr -> NEW TYPE','expr',2,'p_expr_new','main.py',748),
  ('expr -> ISVOID expr','expr',2,'p_expr_isvoid','main.py',754),
  ('expr -> expr PLUS expr','expr',3,'p_expr_plus','main.py',760),
  ('expr -> expr MINUS expr','expr',3,'p_expr_minus','main.py',765),
  ('expr -> expr TIMES expr','expr',3,'p_expr_times','main.py',770),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_divide','main.py',775),
  ('expr -> expr LT expr','expr',3,'p_expr_lt','main.py',781),
  ('expr -> expr LE expr','expr',3,'p_expr_le','main.py',786),
  ('expr -> expr EQUALS expr','expr',3,'p_expr_equals','main.py',791),
  ('expr -> NOT expr','expr',2,'p_expr_not','main.py',797),
  ('expr -> TILDE expr','expr',2,'p_expr_negate','main.py',803),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr_parens','main.py',808),
  ('expr -> IDENTIFIER','expr',1,'p_expr_identifier','main.py',814),
  ('expr -> INTEGER','expr',1,'p_expr_integer','main.py',820),
  ('expr -> STRING','expr',1,'p_expr_string','main.py',825),
  ('expr -> TRUE','expr',1,'p_expr_true','main.py',830),
  ('expr -> FALSE','expr',1,'p_expr_false','main.py',835),
]
