Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> classes
Rule 2     classes -> class SEMI classes
Rule 3     classes -> class SEMI
Rule 4     class -> CLASS TYPE INHERITS TYPE LBRACE features RBRACE
Rule 5     class -> CLASS TYPE LBRACE features RBRACE
Rule 6     features -> feature SEMI features
Rule 7     features -> <empty>
Rule 8     feature -> IDENTIFIER LPAREN formals RPAREN COLON TYPE LBRACE expr RBRACE
Rule 9     feature -> IDENTIFIER LPAREN RPAREN COLON TYPE LBRACE expr RBRACE
Rule 10    feature -> formal LARROW expr
Rule 11    feature -> formal
Rule 12    formals -> formal COMMA formals
Rule 13    formals -> formal
Rule 14    formal -> IDENTIFIER COLON TYPE
Rule 15    expr -> IDENTIFIER LARROW expr
Rule 16    expr -> expr AT TYPE DOT dispatch
Rule 17    expr -> expr DOT dispatch
Rule 18    expr -> dispatch
Rule 19    dispatch -> IDENTIFIER LPAREN exprs RPAREN
Rule 20    dispatch -> IDENTIFIER LPAREN RPAREN
Rule 21    exprs -> expr COMMA exprs
Rule 22    exprs -> expr
Rule 23    expr -> IF expr THEN expr ELSE expr FI
Rule 24    expr -> WHILE expr LOOP expr POOL
Rule 25    expr -> LBRACE exprsemi RBRACE
Rule 26    exprsemi -> expr SEMI exprsemi
Rule 27    exprsemi -> expr SEMI
Rule 28    expr -> LET binding bindings IN expr
Rule 29    binding -> formal LARROW expr
Rule 30    binding -> formal
Rule 31    bindings -> COMMA formal bindings
Rule 32    bindings -> <empty>
Rule 33    expr -> CASE expr OF cases ESAC
Rule 34    cases -> IDENTIFIER COLON TYPE RARROW expr SEMI cases
Rule 35    cases -> IDENTIFIER COLON TYPE RARROW expr SEMI
Rule 36    expr -> NEW TYPE
Rule 37    expr -> ISVOID expr
Rule 38    expr -> expr PLUS expr
Rule 39    expr -> expr MINUS expr
Rule 40    expr -> expr TIMES expr
Rule 41    expr -> expr DIVIDE expr
Rule 42    expr -> TILDE expr
Rule 43    expr -> expr LT expr
Rule 44    expr -> expr LE expr
Rule 45    expr -> expr EQUALS expr
Rule 46    expr -> NOT expr
Rule 47    expr -> LPAREN expr RPAREN
Rule 48    expr -> IDENTIFIER
Rule 49    expr -> INTEGER
Rule 50    expr -> STRING
Rule 51    expr -> TRUE
Rule 52    expr -> FALSE

Terminals, with rules where they appear

AT                   : 16
CASE                 : 33
CLASS                : 4 5
COLON                : 8 9 14 34 35
COMMA                : 12 21 31
DIVIDE               : 41
DOT                  : 16 17
ELSE                 : 23
EQUALS               : 45
ESAC                 : 33
FALSE                : 52
FI                   : 23
IDENTIFIER           : 8 9 14 15 19 20 34 35 48
IF                   : 23
IN                   : 28
INHERITS             : 4
INTEGER              : 49
ISVOID               : 37
LARROW               : 10 15 29
LBRACE               : 4 5 8 9 25
LE                   : 44
LET                  : 28
LOOP                 : 24
LPAREN               : 8 9 19 20 47
LT                   : 43
MINUS                : 39
NEW                  : 36
NOT                  : 46
OF                   : 33
PLUS                 : 38
POOL                 : 24
RARROW               : 34 35
RBRACE               : 4 5 8 9 25
RPAREN               : 8 9 19 20 47
SEMI                 : 2 3 6 26 27 34 35
STRING               : 50
THEN                 : 23
TILDE                : 42
TIMES                : 40
TRUE                 : 51
TYPE                 : 4 4 5 8 9 14 16 34 35 36
WHILE                : 24
error                : 

Nonterminals, with rules where they appear

binding              : 28
bindings             : 28 31
cases                : 33 34
class                : 2 3
classes              : 1 2
dispatch             : 16 17 18
expr                 : 8 9 10 15 16 17 21 22 23 23 23 24 24 26 27 28 29 33 34 35 37 38 38 39 39 40 40 41 41 42 43 43 44 44 45 45 46 47
exprs                : 19 21
exprsemi             : 25 26
feature              : 6
features             : 4 5 6
formal               : 10 11 12 13 29 30 31
formals              : 8 12
program              : 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . classes
    (2) classes -> . class SEMI classes
    (3) classes -> . class SEMI
    (4) class -> . CLASS TYPE INHERITS TYPE LBRACE features RBRACE
    (5) class -> . CLASS TYPE LBRACE features RBRACE

    CLASS           shift and go to state 2

    classes                        shift and go to state 3
    program                        shift and go to state 1
    class                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (4) class -> CLASS . TYPE INHERITS TYPE LBRACE features RBRACE
    (5) class -> CLASS . TYPE LBRACE features RBRACE

    TYPE            shift and go to state 5


state 3

    (1) program -> classes .

    $end            reduce using rule 1 (program -> classes .)


state 4

    (2) classes -> class . SEMI classes
    (3) classes -> class . SEMI

    SEMI            shift and go to state 6


state 5

    (4) class -> CLASS TYPE . INHERITS TYPE LBRACE features RBRACE
    (5) class -> CLASS TYPE . LBRACE features RBRACE

    INHERITS        shift and go to state 7
    LBRACE          shift and go to state 8


state 6

    (2) classes -> class SEMI . classes
    (3) classes -> class SEMI .
    (2) classes -> . class SEMI classes
    (3) classes -> . class SEMI
    (4) class -> . CLASS TYPE INHERITS TYPE LBRACE features RBRACE
    (5) class -> . CLASS TYPE LBRACE features RBRACE

    $end            reduce using rule 3 (classes -> class SEMI .)
    CLASS           shift and go to state 2

    classes                        shift and go to state 9
    class                          shift and go to state 4

state 7

    (4) class -> CLASS TYPE INHERITS . TYPE LBRACE features RBRACE

    TYPE            shift and go to state 10


state 8

    (5) class -> CLASS TYPE LBRACE . features RBRACE
    (6) features -> . feature SEMI features
    (7) features -> .
    (8) feature -> . IDENTIFIER LPAREN formals RPAREN COLON TYPE LBRACE expr RBRACE
    (9) feature -> . IDENTIFIER LPAREN RPAREN COLON TYPE LBRACE expr RBRACE
    (10) feature -> . formal LARROW expr
    (11) feature -> . formal
    (14) formal -> . IDENTIFIER COLON TYPE

    RBRACE          reduce using rule 7 (features -> .)
    IDENTIFIER      shift and go to state 13

    formal                         shift and go to state 12
    features                       shift and go to state 14
    feature                        shift and go to state 11

state 9

    (2) classes -> class SEMI classes .

    $end            reduce using rule 2 (classes -> class SEMI classes .)


state 10

    (4) class -> CLASS TYPE INHERITS TYPE . LBRACE features RBRACE

    LBRACE          shift and go to state 15


state 11

    (6) features -> feature . SEMI features

    SEMI            shift and go to state 16


state 12

    (10) feature -> formal . LARROW expr
    (11) feature -> formal .

    LARROW          shift and go to state 17
    SEMI            reduce using rule 11 (feature -> formal .)


state 13

    (8) feature -> IDENTIFIER . LPAREN formals RPAREN COLON TYPE LBRACE expr RBRACE
    (9) feature -> IDENTIFIER . LPAREN RPAREN COLON TYPE LBRACE expr RBRACE
    (14) formal -> IDENTIFIER . COLON TYPE

    LPAREN          shift and go to state 19
    COLON           shift and go to state 18


state 14

    (5) class -> CLASS TYPE LBRACE features . RBRACE

    RBRACE          shift and go to state 20


state 15

    (4) class -> CLASS TYPE INHERITS TYPE LBRACE . features RBRACE
    (6) features -> . feature SEMI features
    (7) features -> .
    (8) feature -> . IDENTIFIER LPAREN formals RPAREN COLON TYPE LBRACE expr RBRACE
    (9) feature -> . IDENTIFIER LPAREN RPAREN COLON TYPE LBRACE expr RBRACE
    (10) feature -> . formal LARROW expr
    (11) feature -> . formal
    (14) formal -> . IDENTIFIER COLON TYPE

    RBRACE          reduce using rule 7 (features -> .)
    IDENTIFIER      shift and go to state 13

    formal                         shift and go to state 12
    features                       shift and go to state 21
    feature                        shift and go to state 11

state 16

    (6) features -> feature SEMI . features
    (6) features -> . feature SEMI features
    (7) features -> .
    (8) feature -> . IDENTIFIER LPAREN formals RPAREN COLON TYPE LBRACE expr RBRACE
    (9) feature -> . IDENTIFIER LPAREN RPAREN COLON TYPE LBRACE expr RBRACE
    (10) feature -> . formal LARROW expr
    (11) feature -> . formal
    (14) formal -> . IDENTIFIER COLON TYPE

    RBRACE          reduce using rule 7 (features -> .)
    IDENTIFIER      shift and go to state 13

    formal                         shift and go to state 12
    feature                        shift and go to state 11
    features                       shift and go to state 22

state 17

    (10) feature -> formal LARROW . expr
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 38
    dispatch                       shift and go to state 23

state 18

    (14) formal -> IDENTIFIER COLON . TYPE

    TYPE            shift and go to state 40


state 19

    (8) feature -> IDENTIFIER LPAREN . formals RPAREN COLON TYPE LBRACE expr RBRACE
    (9) feature -> IDENTIFIER LPAREN . RPAREN COLON TYPE LBRACE expr RBRACE
    (12) formals -> . formal COMMA formals
    (13) formals -> . formal
    (14) formal -> . IDENTIFIER COLON TYPE

    RPAREN          shift and go to state 41
    IDENTIFIER      shift and go to state 43

    formal                         shift and go to state 42
    formals                        shift and go to state 44

state 20

    (5) class -> CLASS TYPE LBRACE features RBRACE .

    SEMI            reduce using rule 5 (class -> CLASS TYPE LBRACE features RBRACE .)


state 21

    (4) class -> CLASS TYPE INHERITS TYPE LBRACE features . RBRACE

    RBRACE          shift and go to state 45


state 22

    (6) features -> feature SEMI features .

    RBRACE          reduce using rule 6 (features -> feature SEMI features .)


state 23

    (18) expr -> dispatch .

    AT              reduce using rule 18 (expr -> dispatch .)
    DOT             reduce using rule 18 (expr -> dispatch .)
    PLUS            reduce using rule 18 (expr -> dispatch .)
    MINUS           reduce using rule 18 (expr -> dispatch .)
    TIMES           reduce using rule 18 (expr -> dispatch .)
    DIVIDE          reduce using rule 18 (expr -> dispatch .)
    LT              reduce using rule 18 (expr -> dispatch .)
    LE              reduce using rule 18 (expr -> dispatch .)
    EQUALS          reduce using rule 18 (expr -> dispatch .)
    SEMI            reduce using rule 18 (expr -> dispatch .)
    COMMA           reduce using rule 18 (expr -> dispatch .)
    IN              reduce using rule 18 (expr -> dispatch .)
    LOOP            reduce using rule 18 (expr -> dispatch .)
    OF              reduce using rule 18 (expr -> dispatch .)
    RPAREN          reduce using rule 18 (expr -> dispatch .)
    THEN            reduce using rule 18 (expr -> dispatch .)
    POOL            reduce using rule 18 (expr -> dispatch .)
    ELSE            reduce using rule 18 (expr -> dispatch .)
    RBRACE          reduce using rule 18 (expr -> dispatch .)
    FI              reduce using rule 18 (expr -> dispatch .)


state 24

    (24) expr -> WHILE . expr LOOP expr POOL
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 46
    dispatch                       shift and go to state 23

state 25

    (36) expr -> NEW . TYPE

    TYPE            shift and go to state 47


state 26

    (51) expr -> TRUE .

    AT              reduce using rule 51 (expr -> TRUE .)
    DOT             reduce using rule 51 (expr -> TRUE .)
    PLUS            reduce using rule 51 (expr -> TRUE .)
    MINUS           reduce using rule 51 (expr -> TRUE .)
    TIMES           reduce using rule 51 (expr -> TRUE .)
    DIVIDE          reduce using rule 51 (expr -> TRUE .)
    LT              reduce using rule 51 (expr -> TRUE .)
    LE              reduce using rule 51 (expr -> TRUE .)
    EQUALS          reduce using rule 51 (expr -> TRUE .)
    SEMI            reduce using rule 51 (expr -> TRUE .)
    COMMA           reduce using rule 51 (expr -> TRUE .)
    IN              reduce using rule 51 (expr -> TRUE .)
    LOOP            reduce using rule 51 (expr -> TRUE .)
    OF              reduce using rule 51 (expr -> TRUE .)
    RPAREN          reduce using rule 51 (expr -> TRUE .)
    THEN            reduce using rule 51 (expr -> TRUE .)
    POOL            reduce using rule 51 (expr -> TRUE .)
    ELSE            reduce using rule 51 (expr -> TRUE .)
    RBRACE          reduce using rule 51 (expr -> TRUE .)
    FI              reduce using rule 51 (expr -> TRUE .)


state 27

    (33) expr -> CASE . expr OF cases ESAC
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 48
    dispatch                       shift and go to state 23

state 28

    (37) expr -> ISVOID . expr
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 49
    dispatch                       shift and go to state 23

state 29

    (42) expr -> TILDE . expr
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 50
    dispatch                       shift and go to state 23

state 30

    (49) expr -> INTEGER .

    AT              reduce using rule 49 (expr -> INTEGER .)
    DOT             reduce using rule 49 (expr -> INTEGER .)
    PLUS            reduce using rule 49 (expr -> INTEGER .)
    MINUS           reduce using rule 49 (expr -> INTEGER .)
    TIMES           reduce using rule 49 (expr -> INTEGER .)
    DIVIDE          reduce using rule 49 (expr -> INTEGER .)
    LT              reduce using rule 49 (expr -> INTEGER .)
    LE              reduce using rule 49 (expr -> INTEGER .)
    EQUALS          reduce using rule 49 (expr -> INTEGER .)
    SEMI            reduce using rule 49 (expr -> INTEGER .)
    COMMA           reduce using rule 49 (expr -> INTEGER .)
    IN              reduce using rule 49 (expr -> INTEGER .)
    LOOP            reduce using rule 49 (expr -> INTEGER .)
    OF              reduce using rule 49 (expr -> INTEGER .)
    RPAREN          reduce using rule 49 (expr -> INTEGER .)
    THEN            reduce using rule 49 (expr -> INTEGER .)
    POOL            reduce using rule 49 (expr -> INTEGER .)
    ELSE            reduce using rule 49 (expr -> INTEGER .)
    RBRACE          reduce using rule 49 (expr -> INTEGER .)
    FI              reduce using rule 49 (expr -> INTEGER .)


state 31

    (50) expr -> STRING .

    AT              reduce using rule 50 (expr -> STRING .)
    DOT             reduce using rule 50 (expr -> STRING .)
    PLUS            reduce using rule 50 (expr -> STRING .)
    MINUS           reduce using rule 50 (expr -> STRING .)
    TIMES           reduce using rule 50 (expr -> STRING .)
    DIVIDE          reduce using rule 50 (expr -> STRING .)
    LT              reduce using rule 50 (expr -> STRING .)
    LE              reduce using rule 50 (expr -> STRING .)
    EQUALS          reduce using rule 50 (expr -> STRING .)
    SEMI            reduce using rule 50 (expr -> STRING .)
    COMMA           reduce using rule 50 (expr -> STRING .)
    IN              reduce using rule 50 (expr -> STRING .)
    LOOP            reduce using rule 50 (expr -> STRING .)
    OF              reduce using rule 50 (expr -> STRING .)
    RPAREN          reduce using rule 50 (expr -> STRING .)
    THEN            reduce using rule 50 (expr -> STRING .)
    POOL            reduce using rule 50 (expr -> STRING .)
    ELSE            reduce using rule 50 (expr -> STRING .)
    RBRACE          reduce using rule 50 (expr -> STRING .)
    FI              reduce using rule 50 (expr -> STRING .)


state 32

    (15) expr -> IDENTIFIER . LARROW expr
    (48) expr -> IDENTIFIER .
    (19) dispatch -> IDENTIFIER . LPAREN exprs RPAREN
    (20) dispatch -> IDENTIFIER . LPAREN RPAREN

    LARROW          shift and go to state 51
    AT              reduce using rule 48 (expr -> IDENTIFIER .)
    DOT             reduce using rule 48 (expr -> IDENTIFIER .)
    PLUS            reduce using rule 48 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 48 (expr -> IDENTIFIER .)
    TIMES           reduce using rule 48 (expr -> IDENTIFIER .)
    DIVIDE          reduce using rule 48 (expr -> IDENTIFIER .)
    LT              reduce using rule 48 (expr -> IDENTIFIER .)
    LE              reduce using rule 48 (expr -> IDENTIFIER .)
    EQUALS          reduce using rule 48 (expr -> IDENTIFIER .)
    SEMI            reduce using rule 48 (expr -> IDENTIFIER .)
    COMMA           reduce using rule 48 (expr -> IDENTIFIER .)
    IN              reduce using rule 48 (expr -> IDENTIFIER .)
    LOOP            reduce using rule 48 (expr -> IDENTIFIER .)
    OF              reduce using rule 48 (expr -> IDENTIFIER .)
    RPAREN          reduce using rule 48 (expr -> IDENTIFIER .)
    THEN            reduce using rule 48 (expr -> IDENTIFIER .)
    POOL            reduce using rule 48 (expr -> IDENTIFIER .)
    ELSE            reduce using rule 48 (expr -> IDENTIFIER .)
    RBRACE          reduce using rule 48 (expr -> IDENTIFIER .)
    FI              reduce using rule 48 (expr -> IDENTIFIER .)
    LPAREN          shift and go to state 52


state 33

    (46) expr -> NOT . expr
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 53
    dispatch                       shift and go to state 23

state 34

    (47) expr -> LPAREN . expr RPAREN
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 54
    dispatch                       shift and go to state 23

state 35

    (23) expr -> IF . expr THEN expr ELSE expr FI
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 55
    dispatch                       shift and go to state 23

state 36

    (25) expr -> LBRACE . exprsemi RBRACE
    (26) exprsemi -> . expr SEMI exprsemi
    (27) exprsemi -> . expr SEMI
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 56
    dispatch                       shift and go to state 23
    exprsemi                       shift and go to state 57

state 37

    (52) expr -> FALSE .

    AT              reduce using rule 52 (expr -> FALSE .)
    DOT             reduce using rule 52 (expr -> FALSE .)
    PLUS            reduce using rule 52 (expr -> FALSE .)
    MINUS           reduce using rule 52 (expr -> FALSE .)
    TIMES           reduce using rule 52 (expr -> FALSE .)
    DIVIDE          reduce using rule 52 (expr -> FALSE .)
    LT              reduce using rule 52 (expr -> FALSE .)
    LE              reduce using rule 52 (expr -> FALSE .)
    EQUALS          reduce using rule 52 (expr -> FALSE .)
    SEMI            reduce using rule 52 (expr -> FALSE .)
    COMMA           reduce using rule 52 (expr -> FALSE .)
    IN              reduce using rule 52 (expr -> FALSE .)
    LOOP            reduce using rule 52 (expr -> FALSE .)
    OF              reduce using rule 52 (expr -> FALSE .)
    RPAREN          reduce using rule 52 (expr -> FALSE .)
    THEN            reduce using rule 52 (expr -> FALSE .)
    POOL            reduce using rule 52 (expr -> FALSE .)
    ELSE            reduce using rule 52 (expr -> FALSE .)
    RBRACE          reduce using rule 52 (expr -> FALSE .)
    FI              reduce using rule 52 (expr -> FALSE .)


state 38

    (10) feature -> formal LARROW expr .
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    SEMI            reduce using rule 10 (feature -> formal LARROW expr .)
    AT              shift and go to state 64
    DOT             shift and go to state 66
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 59
    LT              shift and go to state 62
    LE              shift and go to state 58
    EQUALS          shift and go to state 60


state 39

    (28) expr -> LET . binding bindings IN expr
    (29) binding -> . formal LARROW expr
    (30) binding -> . formal
    (14) formal -> . IDENTIFIER COLON TYPE

    IDENTIFIER      shift and go to state 43

    binding                        shift and go to state 67
    formal                         shift and go to state 68

state 40

    (14) formal -> IDENTIFIER COLON TYPE .

    COMMA           reduce using rule 14 (formal -> IDENTIFIER COLON TYPE .)
    RPAREN          reduce using rule 14 (formal -> IDENTIFIER COLON TYPE .)
    LARROW          reduce using rule 14 (formal -> IDENTIFIER COLON TYPE .)
    IN              reduce using rule 14 (formal -> IDENTIFIER COLON TYPE .)
    SEMI            reduce using rule 14 (formal -> IDENTIFIER COLON TYPE .)


state 41

    (9) feature -> IDENTIFIER LPAREN RPAREN . COLON TYPE LBRACE expr RBRACE

    COLON           shift and go to state 69


state 42

    (12) formals -> formal . COMMA formals
    (13) formals -> formal .

    COMMA           shift and go to state 70
    RPAREN          reduce using rule 13 (formals -> formal .)


state 43

    (14) formal -> IDENTIFIER . COLON TYPE

    COLON           shift and go to state 18


state 44

    (8) feature -> IDENTIFIER LPAREN formals . RPAREN COLON TYPE LBRACE expr RBRACE

    RPAREN          shift and go to state 71


state 45

    (4) class -> CLASS TYPE INHERITS TYPE LBRACE features RBRACE .

    SEMI            reduce using rule 4 (class -> CLASS TYPE INHERITS TYPE LBRACE features RBRACE .)


state 46

    (24) expr -> WHILE expr . LOOP expr POOL
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    LOOP            shift and go to state 72
    AT              shift and go to state 64
    DOT             shift and go to state 66
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 59
    LT              shift and go to state 62
    LE              shift and go to state 58
    EQUALS          shift and go to state 60


state 47

    (36) expr -> NEW TYPE .

    AT              reduce using rule 36 (expr -> NEW TYPE .)
    DOT             reduce using rule 36 (expr -> NEW TYPE .)
    PLUS            reduce using rule 36 (expr -> NEW TYPE .)
    MINUS           reduce using rule 36 (expr -> NEW TYPE .)
    TIMES           reduce using rule 36 (expr -> NEW TYPE .)
    DIVIDE          reduce using rule 36 (expr -> NEW TYPE .)
    LT              reduce using rule 36 (expr -> NEW TYPE .)
    LE              reduce using rule 36 (expr -> NEW TYPE .)
    EQUALS          reduce using rule 36 (expr -> NEW TYPE .)
    SEMI            reduce using rule 36 (expr -> NEW TYPE .)
    COMMA           reduce using rule 36 (expr -> NEW TYPE .)
    IN              reduce using rule 36 (expr -> NEW TYPE .)
    LOOP            reduce using rule 36 (expr -> NEW TYPE .)
    OF              reduce using rule 36 (expr -> NEW TYPE .)
    RPAREN          reduce using rule 36 (expr -> NEW TYPE .)
    THEN            reduce using rule 36 (expr -> NEW TYPE .)
    POOL            reduce using rule 36 (expr -> NEW TYPE .)
    ELSE            reduce using rule 36 (expr -> NEW TYPE .)
    RBRACE          reduce using rule 36 (expr -> NEW TYPE .)
    FI              reduce using rule 36 (expr -> NEW TYPE .)


state 48

    (33) expr -> CASE expr . OF cases ESAC
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    OF              shift and go to state 73
    AT              shift and go to state 64
    DOT             shift and go to state 66
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 59
    LT              shift and go to state 62
    LE              shift and go to state 58
    EQUALS          shift and go to state 60


state 49

    (37) expr -> ISVOID expr .
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    AT              reduce using rule 37 (expr -> ISVOID expr .)
    DOT             reduce using rule 37 (expr -> ISVOID expr .)
    SEMI            reduce using rule 37 (expr -> ISVOID expr .)
    COMMA           reduce using rule 37 (expr -> ISVOID expr .)
    IN              reduce using rule 37 (expr -> ISVOID expr .)
    LOOP            reduce using rule 37 (expr -> ISVOID expr .)
    OF              reduce using rule 37 (expr -> ISVOID expr .)
    RPAREN          reduce using rule 37 (expr -> ISVOID expr .)
    THEN            reduce using rule 37 (expr -> ISVOID expr .)
    POOL            reduce using rule 37 (expr -> ISVOID expr .)
    ELSE            reduce using rule 37 (expr -> ISVOID expr .)
    RBRACE          reduce using rule 37 (expr -> ISVOID expr .)
    FI              reduce using rule 37 (expr -> ISVOID expr .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 59
    LT              shift and go to state 62
    LE              shift and go to state 58
    EQUALS          shift and go to state 60

  ! PLUS            [ reduce using rule 37 (expr -> ISVOID expr .) ]
  ! MINUS           [ reduce using rule 37 (expr -> ISVOID expr .) ]
  ! TIMES           [ reduce using rule 37 (expr -> ISVOID expr .) ]
  ! DIVIDE          [ reduce using rule 37 (expr -> ISVOID expr .) ]
  ! LT              [ reduce using rule 37 (expr -> ISVOID expr .) ]
  ! LE              [ reduce using rule 37 (expr -> ISVOID expr .) ]
  ! EQUALS          [ reduce using rule 37 (expr -> ISVOID expr .) ]
  ! AT              [ shift and go to state 64 ]
  ! DOT             [ shift and go to state 66 ]


state 50

    (42) expr -> TILDE expr .
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    AT              reduce using rule 42 (expr -> TILDE expr .)
    DOT             reduce using rule 42 (expr -> TILDE expr .)
    SEMI            reduce using rule 42 (expr -> TILDE expr .)
    COMMA           reduce using rule 42 (expr -> TILDE expr .)
    IN              reduce using rule 42 (expr -> TILDE expr .)
    LOOP            reduce using rule 42 (expr -> TILDE expr .)
    OF              reduce using rule 42 (expr -> TILDE expr .)
    RPAREN          reduce using rule 42 (expr -> TILDE expr .)
    THEN            reduce using rule 42 (expr -> TILDE expr .)
    POOL            reduce using rule 42 (expr -> TILDE expr .)
    ELSE            reduce using rule 42 (expr -> TILDE expr .)
    RBRACE          reduce using rule 42 (expr -> TILDE expr .)
    FI              reduce using rule 42 (expr -> TILDE expr .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 59
    LT              shift and go to state 62
    LE              shift and go to state 58
    EQUALS          shift and go to state 60

  ! PLUS            [ reduce using rule 42 (expr -> TILDE expr .) ]
  ! MINUS           [ reduce using rule 42 (expr -> TILDE expr .) ]
  ! TIMES           [ reduce using rule 42 (expr -> TILDE expr .) ]
  ! DIVIDE          [ reduce using rule 42 (expr -> TILDE expr .) ]
  ! LT              [ reduce using rule 42 (expr -> TILDE expr .) ]
  ! LE              [ reduce using rule 42 (expr -> TILDE expr .) ]
  ! EQUALS          [ reduce using rule 42 (expr -> TILDE expr .) ]
  ! AT              [ shift and go to state 64 ]
  ! DOT             [ shift and go to state 66 ]


state 51

    (15) expr -> IDENTIFIER LARROW . expr
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 74
    dispatch                       shift and go to state 23

state 52

    (19) dispatch -> IDENTIFIER LPAREN . exprs RPAREN
    (20) dispatch -> IDENTIFIER LPAREN . RPAREN
    (21) exprs -> . expr COMMA exprs
    (22) exprs -> . expr
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    RPAREN          shift and go to state 75
    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 76
    dispatch                       shift and go to state 23
    exprs                          shift and go to state 77

state 53

    (46) expr -> NOT expr .
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    AT              reduce using rule 46 (expr -> NOT expr .)
    DOT             reduce using rule 46 (expr -> NOT expr .)
    PLUS            reduce using rule 46 (expr -> NOT expr .)
    MINUS           reduce using rule 46 (expr -> NOT expr .)
    TIMES           reduce using rule 46 (expr -> NOT expr .)
    DIVIDE          reduce using rule 46 (expr -> NOT expr .)
    LT              reduce using rule 46 (expr -> NOT expr .)
    LE              reduce using rule 46 (expr -> NOT expr .)
    EQUALS          reduce using rule 46 (expr -> NOT expr .)
    SEMI            reduce using rule 46 (expr -> NOT expr .)
    COMMA           reduce using rule 46 (expr -> NOT expr .)
    IN              reduce using rule 46 (expr -> NOT expr .)
    LOOP            reduce using rule 46 (expr -> NOT expr .)
    OF              reduce using rule 46 (expr -> NOT expr .)
    RPAREN          reduce using rule 46 (expr -> NOT expr .)
    THEN            reduce using rule 46 (expr -> NOT expr .)
    POOL            reduce using rule 46 (expr -> NOT expr .)
    ELSE            reduce using rule 46 (expr -> NOT expr .)
    RBRACE          reduce using rule 46 (expr -> NOT expr .)
    FI              reduce using rule 46 (expr -> NOT expr .)

  ! AT              [ shift and go to state 64 ]
  ! DOT             [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 63 ]
  ! MINUS           [ shift and go to state 65 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 59 ]
  ! LT              [ shift and go to state 62 ]
  ! LE              [ shift and go to state 58 ]
  ! EQUALS          [ shift and go to state 60 ]


state 54

    (47) expr -> LPAREN expr . RPAREN
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    RPAREN          shift and go to state 78
    AT              shift and go to state 64
    DOT             shift and go to state 66
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 59
    LT              shift and go to state 62
    LE              shift and go to state 58
    EQUALS          shift and go to state 60


state 55

    (23) expr -> IF expr . THEN expr ELSE expr FI
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    THEN            shift and go to state 79
    AT              shift and go to state 64
    DOT             shift and go to state 66
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 59
    LT              shift and go to state 62
    LE              shift and go to state 58
    EQUALS          shift and go to state 60


state 56

    (26) exprsemi -> expr . SEMI exprsemi
    (27) exprsemi -> expr . SEMI
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    SEMI            shift and go to state 80
    AT              shift and go to state 64
    DOT             shift and go to state 66
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 59
    LT              shift and go to state 62
    LE              shift and go to state 58
    EQUALS          shift and go to state 60


state 57

    (25) expr -> LBRACE exprsemi . RBRACE

    RBRACE          shift and go to state 81


state 58

    (44) expr -> expr LE . expr
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 82
    dispatch                       shift and go to state 23

state 59

    (41) expr -> expr DIVIDE . expr
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 83
    dispatch                       shift and go to state 23

state 60

    (45) expr -> expr EQUALS . expr
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 84
    dispatch                       shift and go to state 23

state 61

    (40) expr -> expr TIMES . expr
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 85
    dispatch                       shift and go to state 23

state 62

    (43) expr -> expr LT . expr
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 86
    dispatch                       shift and go to state 23

state 63

    (38) expr -> expr PLUS . expr
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 87
    dispatch                       shift and go to state 23

state 64

    (16) expr -> expr AT . TYPE DOT dispatch

    TYPE            shift and go to state 88


state 65

    (39) expr -> expr MINUS . expr
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 89
    dispatch                       shift and go to state 23

state 66

    (17) expr -> expr DOT . dispatch
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 91

    dispatch                       shift and go to state 90

state 67

    (28) expr -> LET binding . bindings IN expr
    (31) bindings -> . COMMA formal bindings
    (32) bindings -> .

    COMMA           shift and go to state 92
    IN              reduce using rule 32 (bindings -> .)

    bindings                       shift and go to state 93

state 68

    (29) binding -> formal . LARROW expr
    (30) binding -> formal .

    LARROW          shift and go to state 94
    COMMA           reduce using rule 30 (binding -> formal .)
    IN              reduce using rule 30 (binding -> formal .)


state 69

    (9) feature -> IDENTIFIER LPAREN RPAREN COLON . TYPE LBRACE expr RBRACE

    TYPE            shift and go to state 95


state 70

    (12) formals -> formal COMMA . formals
    (12) formals -> . formal COMMA formals
    (13) formals -> . formal
    (14) formal -> . IDENTIFIER COLON TYPE

    IDENTIFIER      shift and go to state 43

    formals                        shift and go to state 96
    formal                         shift and go to state 42

state 71

    (8) feature -> IDENTIFIER LPAREN formals RPAREN . COLON TYPE LBRACE expr RBRACE

    COLON           shift and go to state 97


state 72

    (24) expr -> WHILE expr LOOP . expr POOL
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 98
    dispatch                       shift and go to state 23

state 73

    (33) expr -> CASE expr OF . cases ESAC
    (34) cases -> . IDENTIFIER COLON TYPE RARROW expr SEMI cases
    (35) cases -> . IDENTIFIER COLON TYPE RARROW expr SEMI

    IDENTIFIER      shift and go to state 100

    cases                          shift and go to state 99

state 74

    (15) expr -> IDENTIFIER LARROW expr .
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    AT              reduce using rule 15 (expr -> IDENTIFIER LARROW expr .)
    DOT             reduce using rule 15 (expr -> IDENTIFIER LARROW expr .)
    PLUS            reduce using rule 15 (expr -> IDENTIFIER LARROW expr .)
    MINUS           reduce using rule 15 (expr -> IDENTIFIER LARROW expr .)
    TIMES           reduce using rule 15 (expr -> IDENTIFIER LARROW expr .)
    DIVIDE          reduce using rule 15 (expr -> IDENTIFIER LARROW expr .)
    LT              reduce using rule 15 (expr -> IDENTIFIER LARROW expr .)
    LE              reduce using rule 15 (expr -> IDENTIFIER LARROW expr .)
    EQUALS          reduce using rule 15 (expr -> IDENTIFIER LARROW expr .)
    SEMI            reduce using rule 15 (expr -> IDENTIFIER LARROW expr .)
    COMMA           reduce using rule 15 (expr -> IDENTIFIER LARROW expr .)
    IN              reduce using rule 15 (expr -> IDENTIFIER LARROW expr .)
    LOOP            reduce using rule 15 (expr -> IDENTIFIER LARROW expr .)
    OF              reduce using rule 15 (expr -> IDENTIFIER LARROW expr .)
    RPAREN          reduce using rule 15 (expr -> IDENTIFIER LARROW expr .)
    THEN            reduce using rule 15 (expr -> IDENTIFIER LARROW expr .)
    POOL            reduce using rule 15 (expr -> IDENTIFIER LARROW expr .)
    ELSE            reduce using rule 15 (expr -> IDENTIFIER LARROW expr .)
    RBRACE          reduce using rule 15 (expr -> IDENTIFIER LARROW expr .)
    FI              reduce using rule 15 (expr -> IDENTIFIER LARROW expr .)

  ! AT              [ shift and go to state 64 ]
  ! DOT             [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 63 ]
  ! MINUS           [ shift and go to state 65 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 59 ]
  ! LT              [ shift and go to state 62 ]
  ! LE              [ shift and go to state 58 ]
  ! EQUALS          [ shift and go to state 60 ]


state 75

    (20) dispatch -> IDENTIFIER LPAREN RPAREN .

    RBRACE          reduce using rule 20 (dispatch -> IDENTIFIER LPAREN RPAREN .)
    AT              reduce using rule 20 (dispatch -> IDENTIFIER LPAREN RPAREN .)
    DOT             reduce using rule 20 (dispatch -> IDENTIFIER LPAREN RPAREN .)
    PLUS            reduce using rule 20 (dispatch -> IDENTIFIER LPAREN RPAREN .)
    MINUS           reduce using rule 20 (dispatch -> IDENTIFIER LPAREN RPAREN .)
    TIMES           reduce using rule 20 (dispatch -> IDENTIFIER LPAREN RPAREN .)
    DIVIDE          reduce using rule 20 (dispatch -> IDENTIFIER LPAREN RPAREN .)
    LT              reduce using rule 20 (dispatch -> IDENTIFIER LPAREN RPAREN .)
    LE              reduce using rule 20 (dispatch -> IDENTIFIER LPAREN RPAREN .)
    EQUALS          reduce using rule 20 (dispatch -> IDENTIFIER LPAREN RPAREN .)
    SEMI            reduce using rule 20 (dispatch -> IDENTIFIER LPAREN RPAREN .)
    LOOP            reduce using rule 20 (dispatch -> IDENTIFIER LPAREN RPAREN .)
    OF              reduce using rule 20 (dispatch -> IDENTIFIER LPAREN RPAREN .)
    RPAREN          reduce using rule 20 (dispatch -> IDENTIFIER LPAREN RPAREN .)
    THEN            reduce using rule 20 (dispatch -> IDENTIFIER LPAREN RPAREN .)
    COMMA           reduce using rule 20 (dispatch -> IDENTIFIER LPAREN RPAREN .)
    POOL            reduce using rule 20 (dispatch -> IDENTIFIER LPAREN RPAREN .)
    ELSE            reduce using rule 20 (dispatch -> IDENTIFIER LPAREN RPAREN .)
    IN              reduce using rule 20 (dispatch -> IDENTIFIER LPAREN RPAREN .)
    FI              reduce using rule 20 (dispatch -> IDENTIFIER LPAREN RPAREN .)


state 76

    (21) exprs -> expr . COMMA exprs
    (22) exprs -> expr .
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    COMMA           shift and go to state 101
    RPAREN          reduce using rule 22 (exprs -> expr .)
    AT              shift and go to state 64
    DOT             shift and go to state 66
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 59
    LT              shift and go to state 62
    LE              shift and go to state 58
    EQUALS          shift and go to state 60


state 77

    (19) dispatch -> IDENTIFIER LPAREN exprs . RPAREN

    RPAREN          shift and go to state 102


state 78

    (47) expr -> LPAREN expr RPAREN .

    AT              reduce using rule 47 (expr -> LPAREN expr RPAREN .)
    DOT             reduce using rule 47 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 47 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 47 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 47 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 47 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 47 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 47 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 47 (expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 47 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 47 (expr -> LPAREN expr RPAREN .)
    IN              reduce using rule 47 (expr -> LPAREN expr RPAREN .)
    LOOP            reduce using rule 47 (expr -> LPAREN expr RPAREN .)
    OF              reduce using rule 47 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 47 (expr -> LPAREN expr RPAREN .)
    THEN            reduce using rule 47 (expr -> LPAREN expr RPAREN .)
    POOL            reduce using rule 47 (expr -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 47 (expr -> LPAREN expr RPAREN .)
    RBRACE          reduce using rule 47 (expr -> LPAREN expr RPAREN .)
    FI              reduce using rule 47 (expr -> LPAREN expr RPAREN .)


state 79

    (23) expr -> IF expr THEN . expr ELSE expr FI
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 103
    dispatch                       shift and go to state 23

state 80

    (26) exprsemi -> expr SEMI . exprsemi
    (27) exprsemi -> expr SEMI .
    (26) exprsemi -> . expr SEMI exprsemi
    (27) exprsemi -> . expr SEMI
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    RBRACE          reduce using rule 27 (exprsemi -> expr SEMI .)
    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 56
    dispatch                       shift and go to state 23
    exprsemi                       shift and go to state 104

state 81

    (25) expr -> LBRACE exprsemi RBRACE .

    AT              reduce using rule 25 (expr -> LBRACE exprsemi RBRACE .)
    DOT             reduce using rule 25 (expr -> LBRACE exprsemi RBRACE .)
    PLUS            reduce using rule 25 (expr -> LBRACE exprsemi RBRACE .)
    MINUS           reduce using rule 25 (expr -> LBRACE exprsemi RBRACE .)
    TIMES           reduce using rule 25 (expr -> LBRACE exprsemi RBRACE .)
    DIVIDE          reduce using rule 25 (expr -> LBRACE exprsemi RBRACE .)
    LT              reduce using rule 25 (expr -> LBRACE exprsemi RBRACE .)
    LE              reduce using rule 25 (expr -> LBRACE exprsemi RBRACE .)
    EQUALS          reduce using rule 25 (expr -> LBRACE exprsemi RBRACE .)
    SEMI            reduce using rule 25 (expr -> LBRACE exprsemi RBRACE .)
    COMMA           reduce using rule 25 (expr -> LBRACE exprsemi RBRACE .)
    IN              reduce using rule 25 (expr -> LBRACE exprsemi RBRACE .)
    LOOP            reduce using rule 25 (expr -> LBRACE exprsemi RBRACE .)
    OF              reduce using rule 25 (expr -> LBRACE exprsemi RBRACE .)
    RPAREN          reduce using rule 25 (expr -> LBRACE exprsemi RBRACE .)
    THEN            reduce using rule 25 (expr -> LBRACE exprsemi RBRACE .)
    POOL            reduce using rule 25 (expr -> LBRACE exprsemi RBRACE .)
    ELSE            reduce using rule 25 (expr -> LBRACE exprsemi RBRACE .)
    RBRACE          reduce using rule 25 (expr -> LBRACE exprsemi RBRACE .)
    FI              reduce using rule 25 (expr -> LBRACE exprsemi RBRACE .)


state 82

    (44) expr -> expr LE expr .
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    AT              reduce using rule 44 (expr -> expr LE expr .)
    DOT             reduce using rule 44 (expr -> expr LE expr .)
    PLUS            reduce using rule 44 (expr -> expr LE expr .)
    MINUS           reduce using rule 44 (expr -> expr LE expr .)
    TIMES           reduce using rule 44 (expr -> expr LE expr .)
    DIVIDE          reduce using rule 44 (expr -> expr LE expr .)
    LT              reduce using rule 44 (expr -> expr LE expr .)
    LE              reduce using rule 44 (expr -> expr LE expr .)
    EQUALS          reduce using rule 44 (expr -> expr LE expr .)
    SEMI            reduce using rule 44 (expr -> expr LE expr .)
    COMMA           reduce using rule 44 (expr -> expr LE expr .)
    IN              reduce using rule 44 (expr -> expr LE expr .)
    LOOP            reduce using rule 44 (expr -> expr LE expr .)
    OF              reduce using rule 44 (expr -> expr LE expr .)
    RPAREN          reduce using rule 44 (expr -> expr LE expr .)
    THEN            reduce using rule 44 (expr -> expr LE expr .)
    POOL            reduce using rule 44 (expr -> expr LE expr .)
    ELSE            reduce using rule 44 (expr -> expr LE expr .)
    RBRACE          reduce using rule 44 (expr -> expr LE expr .)
    FI              reduce using rule 44 (expr -> expr LE expr .)

  ! AT              [ shift and go to state 64 ]
  ! DOT             [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 63 ]
  ! MINUS           [ shift and go to state 65 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 59 ]
  ! LT              [ shift and go to state 62 ]
  ! LE              [ shift and go to state 58 ]
  ! EQUALS          [ shift and go to state 60 ]


state 83

    (41) expr -> expr DIVIDE expr .
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    AT              reduce using rule 41 (expr -> expr DIVIDE expr .)
    DOT             reduce using rule 41 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 41 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 41 (expr -> expr DIVIDE expr .)
    SEMI            reduce using rule 41 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 41 (expr -> expr DIVIDE expr .)
    IN              reduce using rule 41 (expr -> expr DIVIDE expr .)
    LOOP            reduce using rule 41 (expr -> expr DIVIDE expr .)
    OF              reduce using rule 41 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 41 (expr -> expr DIVIDE expr .)
    THEN            reduce using rule 41 (expr -> expr DIVIDE expr .)
    POOL            reduce using rule 41 (expr -> expr DIVIDE expr .)
    ELSE            reduce using rule 41 (expr -> expr DIVIDE expr .)
    RBRACE          reduce using rule 41 (expr -> expr DIVIDE expr .)
    FI              reduce using rule 41 (expr -> expr DIVIDE expr .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    LT              shift and go to state 62
    LE              shift and go to state 58
    EQUALS          shift and go to state 60

  ! PLUS            [ reduce using rule 41 (expr -> expr DIVIDE expr .) ]
  ! MINUS           [ reduce using rule 41 (expr -> expr DIVIDE expr .) ]
  ! LT              [ reduce using rule 41 (expr -> expr DIVIDE expr .) ]
  ! LE              [ reduce using rule 41 (expr -> expr DIVIDE expr .) ]
  ! EQUALS          [ reduce using rule 41 (expr -> expr DIVIDE expr .) ]
  ! AT              [ shift and go to state 64 ]
  ! DOT             [ shift and go to state 66 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 59 ]


state 84

    (45) expr -> expr EQUALS expr .
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    AT              reduce using rule 45 (expr -> expr EQUALS expr .)
    DOT             reduce using rule 45 (expr -> expr EQUALS expr .)
    PLUS            reduce using rule 45 (expr -> expr EQUALS expr .)
    MINUS           reduce using rule 45 (expr -> expr EQUALS expr .)
    TIMES           reduce using rule 45 (expr -> expr EQUALS expr .)
    DIVIDE          reduce using rule 45 (expr -> expr EQUALS expr .)
    LT              reduce using rule 45 (expr -> expr EQUALS expr .)
    LE              reduce using rule 45 (expr -> expr EQUALS expr .)
    EQUALS          reduce using rule 45 (expr -> expr EQUALS expr .)
    SEMI            reduce using rule 45 (expr -> expr EQUALS expr .)
    COMMA           reduce using rule 45 (expr -> expr EQUALS expr .)
    IN              reduce using rule 45 (expr -> expr EQUALS expr .)
    LOOP            reduce using rule 45 (expr -> expr EQUALS expr .)
    OF              reduce using rule 45 (expr -> expr EQUALS expr .)
    RPAREN          reduce using rule 45 (expr -> expr EQUALS expr .)
    THEN            reduce using rule 45 (expr -> expr EQUALS expr .)
    POOL            reduce using rule 45 (expr -> expr EQUALS expr .)
    ELSE            reduce using rule 45 (expr -> expr EQUALS expr .)
    RBRACE          reduce using rule 45 (expr -> expr EQUALS expr .)
    FI              reduce using rule 45 (expr -> expr EQUALS expr .)

  ! AT              [ shift and go to state 64 ]
  ! DOT             [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 63 ]
  ! MINUS           [ shift and go to state 65 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 59 ]
  ! LT              [ shift and go to state 62 ]
  ! LE              [ shift and go to state 58 ]
  ! EQUALS          [ shift and go to state 60 ]


state 85

    (40) expr -> expr TIMES expr .
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    AT              reduce using rule 40 (expr -> expr TIMES expr .)
    DOT             reduce using rule 40 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 40 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 40 (expr -> expr TIMES expr .)
    SEMI            reduce using rule 40 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 40 (expr -> expr TIMES expr .)
    IN              reduce using rule 40 (expr -> expr TIMES expr .)
    LOOP            reduce using rule 40 (expr -> expr TIMES expr .)
    OF              reduce using rule 40 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 40 (expr -> expr TIMES expr .)
    THEN            reduce using rule 40 (expr -> expr TIMES expr .)
    POOL            reduce using rule 40 (expr -> expr TIMES expr .)
    ELSE            reduce using rule 40 (expr -> expr TIMES expr .)
    RBRACE          reduce using rule 40 (expr -> expr TIMES expr .)
    FI              reduce using rule 40 (expr -> expr TIMES expr .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    LT              shift and go to state 62
    LE              shift and go to state 58
    EQUALS          shift and go to state 60

  ! PLUS            [ reduce using rule 40 (expr -> expr TIMES expr .) ]
  ! MINUS           [ reduce using rule 40 (expr -> expr TIMES expr .) ]
  ! LT              [ reduce using rule 40 (expr -> expr TIMES expr .) ]
  ! LE              [ reduce using rule 40 (expr -> expr TIMES expr .) ]
  ! EQUALS          [ reduce using rule 40 (expr -> expr TIMES expr .) ]
  ! AT              [ shift and go to state 64 ]
  ! DOT             [ shift and go to state 66 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 59 ]


state 86

    (43) expr -> expr LT expr .
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    AT              reduce using rule 43 (expr -> expr LT expr .)
    DOT             reduce using rule 43 (expr -> expr LT expr .)
    PLUS            reduce using rule 43 (expr -> expr LT expr .)
    MINUS           reduce using rule 43 (expr -> expr LT expr .)
    TIMES           reduce using rule 43 (expr -> expr LT expr .)
    DIVIDE          reduce using rule 43 (expr -> expr LT expr .)
    LT              reduce using rule 43 (expr -> expr LT expr .)
    LE              reduce using rule 43 (expr -> expr LT expr .)
    EQUALS          reduce using rule 43 (expr -> expr LT expr .)
    SEMI            reduce using rule 43 (expr -> expr LT expr .)
    COMMA           reduce using rule 43 (expr -> expr LT expr .)
    IN              reduce using rule 43 (expr -> expr LT expr .)
    LOOP            reduce using rule 43 (expr -> expr LT expr .)
    OF              reduce using rule 43 (expr -> expr LT expr .)
    RPAREN          reduce using rule 43 (expr -> expr LT expr .)
    THEN            reduce using rule 43 (expr -> expr LT expr .)
    POOL            reduce using rule 43 (expr -> expr LT expr .)
    ELSE            reduce using rule 43 (expr -> expr LT expr .)
    RBRACE          reduce using rule 43 (expr -> expr LT expr .)
    FI              reduce using rule 43 (expr -> expr LT expr .)

  ! AT              [ shift and go to state 64 ]
  ! DOT             [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 63 ]
  ! MINUS           [ shift and go to state 65 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 59 ]
  ! LT              [ shift and go to state 62 ]
  ! LE              [ shift and go to state 58 ]
  ! EQUALS          [ shift and go to state 60 ]


state 87

    (38) expr -> expr PLUS expr .
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    AT              reduce using rule 38 (expr -> expr PLUS expr .)
    DOT             reduce using rule 38 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 38 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 38 (expr -> expr PLUS expr .)
    TIMES           reduce using rule 38 (expr -> expr PLUS expr .)
    DIVIDE          reduce using rule 38 (expr -> expr PLUS expr .)
    SEMI            reduce using rule 38 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 38 (expr -> expr PLUS expr .)
    IN              reduce using rule 38 (expr -> expr PLUS expr .)
    LOOP            reduce using rule 38 (expr -> expr PLUS expr .)
    OF              reduce using rule 38 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 38 (expr -> expr PLUS expr .)
    THEN            reduce using rule 38 (expr -> expr PLUS expr .)
    POOL            reduce using rule 38 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 38 (expr -> expr PLUS expr .)
    RBRACE          reduce using rule 38 (expr -> expr PLUS expr .)
    FI              reduce using rule 38 (expr -> expr PLUS expr .)
    LT              shift and go to state 62
    LE              shift and go to state 58
    EQUALS          shift and go to state 60

  ! LT              [ reduce using rule 38 (expr -> expr PLUS expr .) ]
  ! LE              [ reduce using rule 38 (expr -> expr PLUS expr .) ]
  ! EQUALS          [ reduce using rule 38 (expr -> expr PLUS expr .) ]
  ! AT              [ shift and go to state 64 ]
  ! DOT             [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 63 ]
  ! MINUS           [ shift and go to state 65 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 59 ]


state 88

    (16) expr -> expr AT TYPE . DOT dispatch

    DOT             shift and go to state 105


state 89

    (39) expr -> expr MINUS expr .
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    AT              reduce using rule 39 (expr -> expr MINUS expr .)
    DOT             reduce using rule 39 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 39 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 39 (expr -> expr MINUS expr .)
    TIMES           reduce using rule 39 (expr -> expr MINUS expr .)
    DIVIDE          reduce using rule 39 (expr -> expr MINUS expr .)
    SEMI            reduce using rule 39 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 39 (expr -> expr MINUS expr .)
    IN              reduce using rule 39 (expr -> expr MINUS expr .)
    LOOP            reduce using rule 39 (expr -> expr MINUS expr .)
    OF              reduce using rule 39 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 39 (expr -> expr MINUS expr .)
    THEN            reduce using rule 39 (expr -> expr MINUS expr .)
    POOL            reduce using rule 39 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 39 (expr -> expr MINUS expr .)
    RBRACE          reduce using rule 39 (expr -> expr MINUS expr .)
    FI              reduce using rule 39 (expr -> expr MINUS expr .)
    LT              shift and go to state 62
    LE              shift and go to state 58
    EQUALS          shift and go to state 60

  ! LT              [ reduce using rule 39 (expr -> expr MINUS expr .) ]
  ! LE              [ reduce using rule 39 (expr -> expr MINUS expr .) ]
  ! EQUALS          [ reduce using rule 39 (expr -> expr MINUS expr .) ]
  ! AT              [ shift and go to state 64 ]
  ! DOT             [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 63 ]
  ! MINUS           [ shift and go to state 65 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 59 ]


state 90

    (17) expr -> expr DOT dispatch .

    AT              reduce using rule 17 (expr -> expr DOT dispatch .)
    DOT             reduce using rule 17 (expr -> expr DOT dispatch .)
    PLUS            reduce using rule 17 (expr -> expr DOT dispatch .)
    MINUS           reduce using rule 17 (expr -> expr DOT dispatch .)
    TIMES           reduce using rule 17 (expr -> expr DOT dispatch .)
    DIVIDE          reduce using rule 17 (expr -> expr DOT dispatch .)
    LT              reduce using rule 17 (expr -> expr DOT dispatch .)
    LE              reduce using rule 17 (expr -> expr DOT dispatch .)
    EQUALS          reduce using rule 17 (expr -> expr DOT dispatch .)
    SEMI            reduce using rule 17 (expr -> expr DOT dispatch .)
    COMMA           reduce using rule 17 (expr -> expr DOT dispatch .)
    IN              reduce using rule 17 (expr -> expr DOT dispatch .)
    LOOP            reduce using rule 17 (expr -> expr DOT dispatch .)
    OF              reduce using rule 17 (expr -> expr DOT dispatch .)
    RPAREN          reduce using rule 17 (expr -> expr DOT dispatch .)
    THEN            reduce using rule 17 (expr -> expr DOT dispatch .)
    POOL            reduce using rule 17 (expr -> expr DOT dispatch .)
    ELSE            reduce using rule 17 (expr -> expr DOT dispatch .)
    RBRACE          reduce using rule 17 (expr -> expr DOT dispatch .)
    FI              reduce using rule 17 (expr -> expr DOT dispatch .)


state 91

    (19) dispatch -> IDENTIFIER . LPAREN exprs RPAREN
    (20) dispatch -> IDENTIFIER . LPAREN RPAREN

    LPAREN          shift and go to state 52


state 92

    (31) bindings -> COMMA . formal bindings
    (14) formal -> . IDENTIFIER COLON TYPE

    IDENTIFIER      shift and go to state 43

    formal                         shift and go to state 106

state 93

    (28) expr -> LET binding bindings . IN expr

    IN              shift and go to state 107


state 94

    (29) binding -> formal LARROW . expr
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 108
    dispatch                       shift and go to state 23

state 95

    (9) feature -> IDENTIFIER LPAREN RPAREN COLON TYPE . LBRACE expr RBRACE

    LBRACE          shift and go to state 109


state 96

    (12) formals -> formal COMMA formals .

    RPAREN          reduce using rule 12 (formals -> formal COMMA formals .)


state 97

    (8) feature -> IDENTIFIER LPAREN formals RPAREN COLON . TYPE LBRACE expr RBRACE

    TYPE            shift and go to state 110


state 98

    (24) expr -> WHILE expr LOOP expr . POOL
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    POOL            shift and go to state 111
    AT              shift and go to state 64
    DOT             shift and go to state 66
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 59
    LT              shift and go to state 62
    LE              shift and go to state 58
    EQUALS          shift and go to state 60


state 99

    (33) expr -> CASE expr OF cases . ESAC

    ESAC            shift and go to state 112


state 100

    (34) cases -> IDENTIFIER . COLON TYPE RARROW expr SEMI cases
    (35) cases -> IDENTIFIER . COLON TYPE RARROW expr SEMI

    COLON           shift and go to state 113


state 101

    (21) exprs -> expr COMMA . exprs
    (21) exprs -> . expr COMMA exprs
    (22) exprs -> . expr
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 76
    dispatch                       shift and go to state 23
    exprs                          shift and go to state 114

state 102

    (19) dispatch -> IDENTIFIER LPAREN exprs RPAREN .

    RBRACE          reduce using rule 19 (dispatch -> IDENTIFIER LPAREN exprs RPAREN .)
    AT              reduce using rule 19 (dispatch -> IDENTIFIER LPAREN exprs RPAREN .)
    DOT             reduce using rule 19 (dispatch -> IDENTIFIER LPAREN exprs RPAREN .)
    PLUS            reduce using rule 19 (dispatch -> IDENTIFIER LPAREN exprs RPAREN .)
    MINUS           reduce using rule 19 (dispatch -> IDENTIFIER LPAREN exprs RPAREN .)
    TIMES           reduce using rule 19 (dispatch -> IDENTIFIER LPAREN exprs RPAREN .)
    DIVIDE          reduce using rule 19 (dispatch -> IDENTIFIER LPAREN exprs RPAREN .)
    LT              reduce using rule 19 (dispatch -> IDENTIFIER LPAREN exprs RPAREN .)
    LE              reduce using rule 19 (dispatch -> IDENTIFIER LPAREN exprs RPAREN .)
    EQUALS          reduce using rule 19 (dispatch -> IDENTIFIER LPAREN exprs RPAREN .)
    SEMI            reduce using rule 19 (dispatch -> IDENTIFIER LPAREN exprs RPAREN .)
    LOOP            reduce using rule 19 (dispatch -> IDENTIFIER LPAREN exprs RPAREN .)
    OF              reduce using rule 19 (dispatch -> IDENTIFIER LPAREN exprs RPAREN .)
    RPAREN          reduce using rule 19 (dispatch -> IDENTIFIER LPAREN exprs RPAREN .)
    THEN            reduce using rule 19 (dispatch -> IDENTIFIER LPAREN exprs RPAREN .)
    COMMA           reduce using rule 19 (dispatch -> IDENTIFIER LPAREN exprs RPAREN .)
    POOL            reduce using rule 19 (dispatch -> IDENTIFIER LPAREN exprs RPAREN .)
    ELSE            reduce using rule 19 (dispatch -> IDENTIFIER LPAREN exprs RPAREN .)
    IN              reduce using rule 19 (dispatch -> IDENTIFIER LPAREN exprs RPAREN .)
    FI              reduce using rule 19 (dispatch -> IDENTIFIER LPAREN exprs RPAREN .)


state 103

    (23) expr -> IF expr THEN expr . ELSE expr FI
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    ELSE            shift and go to state 115
    AT              shift and go to state 64
    DOT             shift and go to state 66
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 59
    LT              shift and go to state 62
    LE              shift and go to state 58
    EQUALS          shift and go to state 60


state 104

    (26) exprsemi -> expr SEMI exprsemi .

    RBRACE          reduce using rule 26 (exprsemi -> expr SEMI exprsemi .)


state 105

    (16) expr -> expr AT TYPE DOT . dispatch
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 91

    dispatch                       shift and go to state 116

state 106

    (31) bindings -> COMMA formal . bindings
    (31) bindings -> . COMMA formal bindings
    (32) bindings -> .

    COMMA           shift and go to state 92
    IN              reduce using rule 32 (bindings -> .)

    bindings                       shift and go to state 117

state 107

    (28) expr -> LET binding bindings IN . expr
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 118
    dispatch                       shift and go to state 23

state 108

    (29) binding -> formal LARROW expr .
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    COMMA           reduce using rule 29 (binding -> formal LARROW expr .)
    IN              reduce using rule 29 (binding -> formal LARROW expr .)
    AT              shift and go to state 64
    DOT             shift and go to state 66
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 59
    LT              shift and go to state 62
    LE              shift and go to state 58
    EQUALS          shift and go to state 60


state 109

    (9) feature -> IDENTIFIER LPAREN RPAREN COLON TYPE LBRACE . expr RBRACE
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 119
    dispatch                       shift and go to state 23

state 110

    (8) feature -> IDENTIFIER LPAREN formals RPAREN COLON TYPE . LBRACE expr RBRACE

    LBRACE          shift and go to state 120


state 111

    (24) expr -> WHILE expr LOOP expr POOL .

    AT              reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    DOT             reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    PLUS            reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    MINUS           reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    TIMES           reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    DIVIDE          reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    LT              reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    LE              reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    EQUALS          reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    SEMI            reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    COMMA           reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    IN              reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    LOOP            reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    OF              reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    RPAREN          reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    THEN            reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    POOL            reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    ELSE            reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    RBRACE          reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)
    FI              reduce using rule 24 (expr -> WHILE expr LOOP expr POOL .)


state 112

    (33) expr -> CASE expr OF cases ESAC .

    AT              reduce using rule 33 (expr -> CASE expr OF cases ESAC .)
    DOT             reduce using rule 33 (expr -> CASE expr OF cases ESAC .)
    PLUS            reduce using rule 33 (expr -> CASE expr OF cases ESAC .)
    MINUS           reduce using rule 33 (expr -> CASE expr OF cases ESAC .)
    TIMES           reduce using rule 33 (expr -> CASE expr OF cases ESAC .)
    DIVIDE          reduce using rule 33 (expr -> CASE expr OF cases ESAC .)
    LT              reduce using rule 33 (expr -> CASE expr OF cases ESAC .)
    LE              reduce using rule 33 (expr -> CASE expr OF cases ESAC .)
    EQUALS          reduce using rule 33 (expr -> CASE expr OF cases ESAC .)
    SEMI            reduce using rule 33 (expr -> CASE expr OF cases ESAC .)
    COMMA           reduce using rule 33 (expr -> CASE expr OF cases ESAC .)
    IN              reduce using rule 33 (expr -> CASE expr OF cases ESAC .)
    LOOP            reduce using rule 33 (expr -> CASE expr OF cases ESAC .)
    OF              reduce using rule 33 (expr -> CASE expr OF cases ESAC .)
    RPAREN          reduce using rule 33 (expr -> CASE expr OF cases ESAC .)
    THEN            reduce using rule 33 (expr -> CASE expr OF cases ESAC .)
    POOL            reduce using rule 33 (expr -> CASE expr OF cases ESAC .)
    ELSE            reduce using rule 33 (expr -> CASE expr OF cases ESAC .)
    RBRACE          reduce using rule 33 (expr -> CASE expr OF cases ESAC .)
    FI              reduce using rule 33 (expr -> CASE expr OF cases ESAC .)


state 113

    (34) cases -> IDENTIFIER COLON . TYPE RARROW expr SEMI cases
    (35) cases -> IDENTIFIER COLON . TYPE RARROW expr SEMI

    TYPE            shift and go to state 121


state 114

    (21) exprs -> expr COMMA exprs .

    RPAREN          reduce using rule 21 (exprs -> expr COMMA exprs .)


state 115

    (23) expr -> IF expr THEN expr ELSE . expr FI
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 122
    dispatch                       shift and go to state 23

state 116

    (16) expr -> expr AT TYPE DOT dispatch .

    AT              reduce using rule 16 (expr -> expr AT TYPE DOT dispatch .)
    DOT             reduce using rule 16 (expr -> expr AT TYPE DOT dispatch .)
    PLUS            reduce using rule 16 (expr -> expr AT TYPE DOT dispatch .)
    MINUS           reduce using rule 16 (expr -> expr AT TYPE DOT dispatch .)
    TIMES           reduce using rule 16 (expr -> expr AT TYPE DOT dispatch .)
    DIVIDE          reduce using rule 16 (expr -> expr AT TYPE DOT dispatch .)
    LT              reduce using rule 16 (expr -> expr AT TYPE DOT dispatch .)
    LE              reduce using rule 16 (expr -> expr AT TYPE DOT dispatch .)
    EQUALS          reduce using rule 16 (expr -> expr AT TYPE DOT dispatch .)
    SEMI            reduce using rule 16 (expr -> expr AT TYPE DOT dispatch .)
    COMMA           reduce using rule 16 (expr -> expr AT TYPE DOT dispatch .)
    IN              reduce using rule 16 (expr -> expr AT TYPE DOT dispatch .)
    LOOP            reduce using rule 16 (expr -> expr AT TYPE DOT dispatch .)
    OF              reduce using rule 16 (expr -> expr AT TYPE DOT dispatch .)
    RPAREN          reduce using rule 16 (expr -> expr AT TYPE DOT dispatch .)
    THEN            reduce using rule 16 (expr -> expr AT TYPE DOT dispatch .)
    POOL            reduce using rule 16 (expr -> expr AT TYPE DOT dispatch .)
    ELSE            reduce using rule 16 (expr -> expr AT TYPE DOT dispatch .)
    RBRACE          reduce using rule 16 (expr -> expr AT TYPE DOT dispatch .)
    FI              reduce using rule 16 (expr -> expr AT TYPE DOT dispatch .)


state 117

    (31) bindings -> COMMA formal bindings .

    IN              reduce using rule 31 (bindings -> COMMA formal bindings .)


state 118

    (28) expr -> LET binding bindings IN expr .
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

  ! shift/reduce conflict for AT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
    SEMI            reduce using rule 28 (expr -> LET binding bindings IN expr .)
    COMMA           reduce using rule 28 (expr -> LET binding bindings IN expr .)
    IN              reduce using rule 28 (expr -> LET binding bindings IN expr .)
    LOOP            reduce using rule 28 (expr -> LET binding bindings IN expr .)
    OF              reduce using rule 28 (expr -> LET binding bindings IN expr .)
    RPAREN          reduce using rule 28 (expr -> LET binding bindings IN expr .)
    THEN            reduce using rule 28 (expr -> LET binding bindings IN expr .)
    POOL            reduce using rule 28 (expr -> LET binding bindings IN expr .)
    ELSE            reduce using rule 28 (expr -> LET binding bindings IN expr .)
    RBRACE          reduce using rule 28 (expr -> LET binding bindings IN expr .)
    FI              reduce using rule 28 (expr -> LET binding bindings IN expr .)
    AT              shift and go to state 64
    DOT             shift and go to state 66
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 59
    LT              shift and go to state 62
    LE              shift and go to state 58
    EQUALS          shift and go to state 60

  ! AT              [ reduce using rule 28 (expr -> LET binding bindings IN expr .) ]
  ! DOT             [ reduce using rule 28 (expr -> LET binding bindings IN expr .) ]
  ! PLUS            [ reduce using rule 28 (expr -> LET binding bindings IN expr .) ]
  ! MINUS           [ reduce using rule 28 (expr -> LET binding bindings IN expr .) ]
  ! TIMES           [ reduce using rule 28 (expr -> LET binding bindings IN expr .) ]
  ! DIVIDE          [ reduce using rule 28 (expr -> LET binding bindings IN expr .) ]
  ! LT              [ reduce using rule 28 (expr -> LET binding bindings IN expr .) ]
  ! LE              [ reduce using rule 28 (expr -> LET binding bindings IN expr .) ]
  ! EQUALS          [ reduce using rule 28 (expr -> LET binding bindings IN expr .) ]


state 119

    (9) feature -> IDENTIFIER LPAREN RPAREN COLON TYPE LBRACE expr . RBRACE
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    RBRACE          shift and go to state 123
    AT              shift and go to state 64
    DOT             shift and go to state 66
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 59
    LT              shift and go to state 62
    LE              shift and go to state 58
    EQUALS          shift and go to state 60


state 120

    (8) feature -> IDENTIFIER LPAREN formals RPAREN COLON TYPE LBRACE . expr RBRACE
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 124
    dispatch                       shift and go to state 23

state 121

    (34) cases -> IDENTIFIER COLON TYPE . RARROW expr SEMI cases
    (35) cases -> IDENTIFIER COLON TYPE . RARROW expr SEMI

    RARROW          shift and go to state 125


state 122

    (23) expr -> IF expr THEN expr ELSE expr . FI
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    FI              shift and go to state 126
    AT              shift and go to state 64
    DOT             shift and go to state 66
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 59
    LT              shift and go to state 62
    LE              shift and go to state 58
    EQUALS          shift and go to state 60


state 123

    (9) feature -> IDENTIFIER LPAREN RPAREN COLON TYPE LBRACE expr RBRACE .

    SEMI            reduce using rule 9 (feature -> IDENTIFIER LPAREN RPAREN COLON TYPE LBRACE expr RBRACE .)


state 124

    (8) feature -> IDENTIFIER LPAREN formals RPAREN COLON TYPE LBRACE expr . RBRACE
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    RBRACE          shift and go to state 127
    AT              shift and go to state 64
    DOT             shift and go to state 66
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 59
    LT              shift and go to state 62
    LE              shift and go to state 58
    EQUALS          shift and go to state 60


state 125

    (34) cases -> IDENTIFIER COLON TYPE RARROW . expr SEMI cases
    (35) cases -> IDENTIFIER COLON TYPE RARROW . expr SEMI
    (15) expr -> . IDENTIFIER LARROW expr
    (16) expr -> . expr AT TYPE DOT dispatch
    (17) expr -> . expr DOT dispatch
    (18) expr -> . dispatch
    (23) expr -> . IF expr THEN expr ELSE expr FI
    (24) expr -> . WHILE expr LOOP expr POOL
    (25) expr -> . LBRACE exprsemi RBRACE
    (28) expr -> . LET binding bindings IN expr
    (33) expr -> . CASE expr OF cases ESAC
    (36) expr -> . NEW TYPE
    (37) expr -> . ISVOID expr
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . TILDE expr
    (43) expr -> . expr LT expr
    (44) expr -> . expr LE expr
    (45) expr -> . expr EQUALS expr
    (46) expr -> . NOT expr
    (47) expr -> . LPAREN expr RPAREN
    (48) expr -> . IDENTIFIER
    (49) expr -> . INTEGER
    (50) expr -> . STRING
    (51) expr -> . TRUE
    (52) expr -> . FALSE
    (19) dispatch -> . IDENTIFIER LPAREN exprs RPAREN
    (20) dispatch -> . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 32
    IF              shift and go to state 35
    WHILE           shift and go to state 24
    LBRACE          shift and go to state 36
    LET             shift and go to state 39
    CASE            shift and go to state 27
    NEW             shift and go to state 25
    ISVOID          shift and go to state 28
    TILDE           shift and go to state 29
    NOT             shift and go to state 33
    LPAREN          shift and go to state 34
    INTEGER         shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 26
    FALSE           shift and go to state 37

    expr                           shift and go to state 128
    dispatch                       shift and go to state 23

state 126

    (23) expr -> IF expr THEN expr ELSE expr FI .

    AT              reduce using rule 23 (expr -> IF expr THEN expr ELSE expr FI .)
    DOT             reduce using rule 23 (expr -> IF expr THEN expr ELSE expr FI .)
    PLUS            reduce using rule 23 (expr -> IF expr THEN expr ELSE expr FI .)
    MINUS           reduce using rule 23 (expr -> IF expr THEN expr ELSE expr FI .)
    TIMES           reduce using rule 23 (expr -> IF expr THEN expr ELSE expr FI .)
    DIVIDE          reduce using rule 23 (expr -> IF expr THEN expr ELSE expr FI .)
    LT              reduce using rule 23 (expr -> IF expr THEN expr ELSE expr FI .)
    LE              reduce using rule 23 (expr -> IF expr THEN expr ELSE expr FI .)
    EQUALS          reduce using rule 23 (expr -> IF expr THEN expr ELSE expr FI .)
    SEMI            reduce using rule 23 (expr -> IF expr THEN expr ELSE expr FI .)
    COMMA           reduce using rule 23 (expr -> IF expr THEN expr ELSE expr FI .)
    IN              reduce using rule 23 (expr -> IF expr THEN expr ELSE expr FI .)
    LOOP            reduce using rule 23 (expr -> IF expr THEN expr ELSE expr FI .)
    OF              reduce using rule 23 (expr -> IF expr THEN expr ELSE expr FI .)
    RPAREN          reduce using rule 23 (expr -> IF expr THEN expr ELSE expr FI .)
    THEN            reduce using rule 23 (expr -> IF expr THEN expr ELSE expr FI .)
    POOL            reduce using rule 23 (expr -> IF expr THEN expr ELSE expr FI .)
    ELSE            reduce using rule 23 (expr -> IF expr THEN expr ELSE expr FI .)
    RBRACE          reduce using rule 23 (expr -> IF expr THEN expr ELSE expr FI .)
    FI              reduce using rule 23 (expr -> IF expr THEN expr ELSE expr FI .)


state 127

    (8) feature -> IDENTIFIER LPAREN formals RPAREN COLON TYPE LBRACE expr RBRACE .

    SEMI            reduce using rule 8 (feature -> IDENTIFIER LPAREN formals RPAREN COLON TYPE LBRACE expr RBRACE .)


state 128

    (34) cases -> IDENTIFIER COLON TYPE RARROW expr . SEMI cases
    (35) cases -> IDENTIFIER COLON TYPE RARROW expr . SEMI
    (16) expr -> expr . AT TYPE DOT dispatch
    (17) expr -> expr . DOT dispatch
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (43) expr -> expr . LT expr
    (44) expr -> expr . LE expr
    (45) expr -> expr . EQUALS expr

    SEMI            shift and go to state 129
    AT              shift and go to state 64
    DOT             shift and go to state 66
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 59
    LT              shift and go to state 62
    LE              shift and go to state 58
    EQUALS          shift and go to state 60


state 129

    (34) cases -> IDENTIFIER COLON TYPE RARROW expr SEMI . cases
    (35) cases -> IDENTIFIER COLON TYPE RARROW expr SEMI .
    (34) cases -> . IDENTIFIER COLON TYPE RARROW expr SEMI cases
    (35) cases -> . IDENTIFIER COLON TYPE RARROW expr SEMI

    ESAC            reduce using rule 35 (cases -> IDENTIFIER COLON TYPE RARROW expr SEMI .)
    IDENTIFIER      shift and go to state 100

    cases                          shift and go to state 130

state 130

    (34) cases -> IDENTIFIER COLON TYPE RARROW expr SEMI cases .

    ESAC            reduce using rule 34 (cases -> IDENTIFIER COLON TYPE RARROW expr SEMI cases .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AT in state 118 resolved as shift
WARNING: shift/reduce conflict for DOT in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 118 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 118 resolved as shift
WARNING: shift/reduce conflict for LT in state 118 resolved as shift
WARNING: shift/reduce conflict for LE in state 118 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 118 resolved as shift
